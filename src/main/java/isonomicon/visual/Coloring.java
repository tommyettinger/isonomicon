package isonomicon.visual;

import com.badlogic.gdx.math.MathUtils;

import java.nio.charset.StandardCharsets;

/**
 * Created by Tommy Ettinger on 11/4/2017.
 */
public class Coloring {

    public static int lighten(final int rgba, float amount){
//        final int r = rgba >>> 24      ;
//        final int g = rgba >>> 16 & 255;
//        final int b = rgba >>> 8 & 255 ;
//        
//        amount *= 255.5f - Math.max(r, Math.max(g, b));
//        return  (int)(r + amount) << 24 |
//                (int)(g + amount) << 16 |
//                (int)(b + amount) << 8 |
//                (rgba & 255);
        return  (int) MathUtils.lerp(rgba >>> 24, 255.5f, amount) << 24 |
                (int) MathUtils.lerp(rgba >>> 16 & 255, 255.5f, amount) << 16 |
                (int) MathUtils.lerp(rgba >>> 8 & 255, 255.5f, amount) << 8 |
                (rgba & 255);
    }
    public static int darken(final int rgba, float amount){
        amount = 1f - amount;
        return (int)((rgba >>> 24) * amount) << 24 |
                (int)((rgba >>> 16 & 255) * amount) << 16 |
                (int)((rgba >>> 8 & 255) * amount) << 8 |
                (rgba & 255);
    }


    public static int lerp(final int rgba1, final int rgba2, float amount){
        return  (int) MathUtils.lerp(rgba1 >>> 24, rgba2 >>> 24, amount) << 24 |
                (int) MathUtils.lerp(rgba1 >>> 16 & 255, rgba2 >>> 16 & 255, amount) << 16 |
                (int) MathUtils.lerp(rgba1 >>> 8 & 255, rgba2 >>> 8 & 255, amount) << 8 |
                (int) MathUtils.lerp(rgba1 & 255, rgba2 & 255, amount);
    }


    /**
     * DawnBringer's 256-color Aurora palette, modified slightly to fit one transparent color by removing one gray.
     * Aurora is available in <a href="http://pixeljoint.com/forum/forum_posts.asp?TID=26080&KW=">this set of tools</a>
     * for a pixel art editor, but it is usable for lots of high-color purposes.
     */
    public static final int[] AURORA = {
            0x00000000, 0x010101FF, 0x131313FF, 0x252525FF, 0x373737FF, 0x494949FF, 0x5B5B5BFF, 0x6E6E6EFF,
            0x808080FF, 0x929292FF, 0xA4A4A4FF, 0xB6B6B6FF, 0xC9C9C9FF, 0xDBDBDBFF, 0xEDEDEDFF, 0xFFFFFFFF,
            0x007F7FFF, 0x3FBFBFFF, 0x00FFFFFF, 0xBFFFFFFF, 0x8181FFFF, 0x0000FFFF, 0x3F3FBFFF, 0x00007FFF,
            0x0F0F50FF, 0x7F007FFF, 0xBF3FBFFF, 0xF500F5FF, 0xFD81FFFF, 0xFFC0CBFF, 0xFF8181FF, 0xFF0000FF,
            0xBF3F3FFF, 0x7F0000FF, 0x551414FF, 0x7F3F00FF, 0xBF7F3FFF, 0xFF7F00FF, 0xFFBF81FF, 0xFFFFBFFF,
            0xFFFF00FF, 0xBFBF3FFF, 0x7F7F00FF, 0x007F00FF, 0x3FBF3FFF, 0x00FF00FF, 0xAFFFAFFF, 0xBCAFC0FF,
            0xCBAA89FF, 0xA6A090FF, 0x7E9494FF, 0x6E8287FF, 0x7E6E60FF, 0xA0695FFF, 0xC07872FF, 0xD08A74FF,
            0xE19B7DFF, 0xEBAA8CFF, 0xF5B99BFF, 0xF6C8AFFF, 0xF5E1D2FF, 0x573B3BFF, 0x73413CFF, 0x8E5555FF,
            0xAB7373FF, 0xC78F8FFF, 0xE3ABABFF, 0xF8D2DAFF, 0xE3C7ABFF, 0xC49E73FF, 0x8F7357FF, 0x73573BFF,
            0x3B2D1FFF, 0x414123FF, 0x73733BFF, 0x8F8F57FF, 0xA2A255FF, 0xB5B572FF, 0xC7C78FFF, 0xDADAABFF,
            0xEDEDC7FF, 0xC7E3ABFF, 0xABC78FFF, 0x8EBE55FF, 0x738F57FF, 0x587D3EFF, 0x465032FF, 0x191E0FFF,
            0x235037FF, 0x3B573BFF, 0x506450FF, 0x3B7349FF, 0x578F57FF, 0x73AB73FF, 0x64C082FF, 0x8FC78FFF,
            0xA2D8A2FF, 0xE1F8FAFF, 0xB4EECAFF, 0xABE3C5FF, 0x87B48EFF, 0x507D5FFF, 0x0F6946FF, 0x1E2D23FF,
            0x234146FF, 0x3B7373FF, 0x64ABABFF, 0x8FC7C7FF, 0xABE3E3FF, 0xC7F1F1FF, 0xBED2F0FF, 0xABC7E3FF,
            0xA8B9DCFF, 0x8FABC7FF, 0x578FC7FF, 0x57738FFF, 0x3B5773FF, 0x0F192DFF, 0x1F1F3BFF, 0x3B3B57FF,
            0x494973FF, 0x57578FFF, 0x736EAAFF, 0x7676CAFF, 0x8F8FC7FF, 0xABABE3FF, 0xD0DAF8FF, 0xE3E3FFFF,
            0xAB8FC7FF, 0x8F57C7FF, 0x73578FFF, 0x573B73FF, 0x3C233CFF, 0x463246FF, 0x724072FF, 0x8F578FFF,
            0xAB57ABFF, 0xAB73ABFF, 0xEBACE1FF, 0xFFDCF5FF, 0xE3C7E3FF, 0xE1B9D2FF, 0xD7A0BEFF, 0xC78FB9FF,
            0xC87DA0FF, 0xC35A91FF, 0x4B2837FF, 0x321623FF, 0x280A1EFF, 0x401811FF, 0x621800FF, 0xA5140AFF,
            0xDA2010FF, 0xD5524AFF, 0xFF3C0AFF, 0xF55A32FF, 0xFF6262FF, 0xF6BD31FF, 0xFFA53CFF, 0xD79B0FFF,
            0xDA6E0AFF, 0xB45A00FF, 0xA04B05FF, 0x5F3214FF, 0x53500AFF, 0x626200FF, 0x8C805AFF, 0xAC9400FF,
            0xB1B10AFF, 0xE6D55AFF, 0xFFD510FF, 0xFFEA4AFF, 0xC8FF41FF, 0x9BF046FF, 0x96DC19FF, 0x73C805FF,
            0x6AA805FF, 0x3C6E14FF, 0x283405FF, 0x204608FF, 0x0C5C0CFF, 0x149605FF, 0x0AD70AFF, 0x14E60AFF,
            0x7DFF73FF, 0x4BF05AFF, 0x00C514FF, 0x05B450FF, 0x1C8C4EFF, 0x123832FF, 0x129880FF, 0x06C491FF,
            0x00DE6AFF, 0x2DEBA8FF, 0x3CFEA5FF, 0x6AFFCDFF, 0x91EBFFFF, 0x55E6FFFF, 0x7DD7F0FF, 0x08DED5FF,
            0x109CDEFF, 0x055A5CFF, 0x162C52FF, 0x0F377DFF, 0x004A9CFF, 0x326496FF, 0x0052F6FF, 0x186ABDFF,
            0x2378DCFF, 0x699DC3FF, 0x4AA4FFFF, 0x90B0FFFF, 0x5AC5FFFF, 0xBEB9FAFF, 0x00BFFFFF, 0x007FFFFF,
            0x4B7DC8FF, 0x786EF0FF, 0x4A5AFFFF, 0x6241F6FF, 0x3C3CF5FF, 0x101CDAFF, 0x0010BDFF, 0x231094FF,
            0x0C2148FF, 0x5010B0FF, 0x6010D0FF, 0x8732D2FF, 0x9C41FFFF, 0x7F00FFFF, 0xBD62FFFF, 0xB991FFFF,
            0xD7A5FFFF, 0xD7C3FAFF, 0xF8C6FCFF, 0xE673FFFF, 0xFF52FFFF, 0xDA20E0FF, 0xBD29FFFF, 0xBD10C5FF,
            0x8C14BEFF, 0x5A187BFF, 0x641464FF, 0x410062FF, 0x320A46FF, 0x551937FF, 0xA01982FF, 0xC80078FF,
            0xFF50BFFF, 0xFF6AC5FF, 0xFAA0B9FF, 0xFC3A8CFF, 0xE61E78FF, 0xBD1039FF, 0x98344DFF, 0x911437FF,
    };

    /**
     * This palette was given along with the Unseven palette
     * <a href="https://www.deviantart.com/foguinhos/art/Unseven-Full-541514728">in this set of swatches</a>, but it's
     * unclear if Unseven made it, or if this palette was published in some other medium. It's a nice palette, with 8
     * levels of lightness ramp for 30 ramps with different hues. It seems meant for pixel art that includes human
     * characters, and doesn't lack for skin tones like Unseven does. It has a generally good selection of light brown
     * colors, and has been adjusted to add some dark brown colors, as well as vividly saturated purple. Many ramps also
     * become more purple as they go into darker shades.
     * <p>
     * This is organized so the colors from index 24 to index 255 inclusive are sorted by hue, from red to orange to
     * yellow to green to blue to purple, while still being organized in blocks of 8 colors at a time from bright to
     * dark. Some almost-grayscale blocks are jumbled in the middle, but they do have a hue and it is always at the
     * point where they are in the sort. A block of colors that are practically true grayscale are at indices 16-23,
     * inclusive.
     */
    public static final int[] RINSED = {
            0x00000000, 0x4444447F, 0x1111117F, 0x88FFFF00, 0x2121217F, 0x00FF003F, 0x0000FF3F, 0x0808083F,
            0xFF574600, 0xFFB14600, 0xFFFD4600, 0x4BFF4600, 0x51BF6C00, 0x4697FF00, 0x9146FF00, 0xFF46AE00,
            0xF8F9FAFF, 0xC4C3C5FF, 0x9C9C9DFF, 0x757676FF, 0x616262FF, 0x4C484AFF, 0x252626FF, 0x090304FF,
            0xD89789FF, 0xC4877AFF, 0xB47B76FF, 0xA36C72FF, 0x905861FF, 0x76454CFF, 0x5F3234FF, 0x452327FF,
            0xF9DCB8FF, 0xCEB29AFF, 0xB29891FF, 0x8F797FFF, 0x75636FFF, 0x554B67FF, 0x3E3552FF, 0x272340FF,
            0xEAA18DFF, 0xCF9180FF, 0xB87C6BFF, 0xA06A60FF, 0x905C59FF, 0x73474BFF, 0x52383EFF, 0x35242AFF,
            0xBEAE97FF, 0xB0968AFF, 0x89756EFF, 0x6E5A54FF, 0x4F413CFF, 0x413534FF, 0x2F2525FF, 0x1C1415FF,
            0xEED8A1FF, 0xE7B38CFF, 0xCC967FFF, 0xB6776DFF, 0x995A55FF, 0x803D49FF, 0x662139FF, 0x500328FF,
            0xFDFE9CFF, 0xFDD7AAFF, 0xE9BBA4FF, 0xC9A09DFF, 0xB7889AFF, 0x957088FF, 0x755B7BFF, 0x514265FF,
            0xFDF067FF, 0xFDBF60FF, 0xEF995AFF, 0xCC7148FF, 0xB65549FF, 0xA34547FF, 0x7D303FFF, 0x61242FFF,
            0xDDBBA4FF, 0xC0A68FFF, 0x9F8871FF, 0x7F6B5CFF, 0x6B5755FF, 0x5D464CFF, 0x482F3DFF, 0x30232DFF,
            0xFEF5E1FF, 0xE9DFD3FF, 0xCFC5BAFF, 0xBAAFABFF, 0xAAA291FF, 0x9A877BFF, 0x816F69FF, 0x615D56FF,
            0xFEF1A8FF, 0xE4CE85FF, 0xC9AD77FF, 0xB19169FF, 0x957859FF, 0x7B604CFF, 0x60463BFF, 0x472F2AFF,
            0xFEFC74FF, 0xE8D861FF, 0xCDAD53FF, 0xB2893EFF, 0x91672FFF, 0x7D4F21FF, 0x693C12FF, 0x562810FF,
            0xFDFCB7FF, 0xFCFA3CFF, 0xFAD725FF, 0xF5B325FF, 0xD7853CFF, 0xB25345FF, 0x8A2B2BFF, 0x67160AFF,
            0xCBD350FF, 0xB3B24BFF, 0x9A9E3AFF, 0x808B30FF, 0x647717FF, 0x4B6309FF, 0x305413FF, 0x272A07FF,
            0x8DC655FF, 0x7BA838FF, 0x6C8A37FF, 0x5D733AFF, 0x4F633CFF, 0x3F5244FF, 0x323D4AFF, 0x232A45FF,
            0xADD54BFF, 0x80B040FF, 0x599135FF, 0x35761AFF, 0x2A621FFF, 0x1E5220FF, 0x063824FF, 0x012B1DFF,
            0xE8FFEFFF, 0xA9DDC0FF, 0x95C89CFF, 0x91B48EFF, 0x759983FF, 0x627F72FF, 0x4C655CFF, 0x36514AFF,
            0x91E49DFF, 0x69C085FF, 0x4F8F62FF, 0x4A7855FF, 0x396044FF, 0x385240FF, 0x31413DFF, 0x233631FF,
            0x09EFD0FF, 0x07CCA2FF, 0x03AA83FF, 0x038D75FF, 0x04726DFF, 0x01585AFF, 0x05454EFF, 0x083142FF,
            0x97D6F9FF, 0x3EB0CAFF, 0x3C919FFF, 0x0A737CFF, 0x226171FF, 0x0B505FFF, 0x0D3948FF, 0x052935FF,
            0x91FCFCFF, 0x68DBFEFF, 0x5CB1D5FF, 0x4C8CAAFF, 0x406883FF, 0x2B4965FF, 0x29324DFF, 0x1C1E34FF,
            0x80D1FBFF, 0x62B2E7FF, 0x4D96DBFF, 0x267DB9FF, 0x195F97FF, 0x114776FF, 0x0B355AFF, 0x031D41FF,
            0xCEEEFDFF, 0xCDD7FEFF, 0xA1AED7FF, 0x898CAEFF, 0x7C7196FF, 0x5E597CFF, 0x404163FF, 0x26294CFF,
            0x8391C1FF, 0x7181CAFF, 0x5E71BEFF, 0x555FA2FF, 0x424C84FF, 0x323B6DFF, 0x2B325CFF, 0x292349FF,
            0xE3D1FDFF, 0xBAABFAFF, 0x9F94E2FF, 0x9588D7FF, 0x7B71B3FF, 0x675E9CFF, 0x4F4D7CFF, 0x333158FF,
            0xA570FFFF, 0x9462FFFF, 0x814EFFFF, 0x6C39FCFF, 0x582DC1FF, 0x472195FF, 0x412160FF, 0x2E1F38FF,
            0xF7C1E7FF, 0xD791C6FF, 0xBB6FAAFF, 0xAF6190FF, 0x924B76FF, 0x623155FF, 0x47253FFF, 0x2F0E25FF,
            0xFDC7FBFF, 0xFC9FC5FF, 0xFB71A9FF, 0xE6497EFF, 0xC33C6BFF, 0x933255FF, 0x68243FFF, 0x3F122AFF,
            0xFDDDDCFF, 0xD1ABB1FF, 0xB48C9AFF, 0x9D7482FF, 0x8B5D6EFF, 0x705057FF, 0x583C4BFF, 0x421E29FF,
            0xFCD9FBFF, 0xFDB8C7FF, 0xFD97AAFF, 0xF46E7EFF, 0xC65365FF, 0x9E303CFF, 0x741B28FF, 0x50071AFF,
    };

//    /**
//     * Big OrderedMap of a name for each color in {@link #RINSED}, mapping String keys to index values, while also
//     * allowing lookup from an index to the corresponding String key using {@link OrderedMap#keyAt(int)}.
//     * Colors with numbers after the names have 0 mean the lightest color in a ramp and 7 mean the darkest.
//     * If you're reading the source, there's a comment above each ramp saying which index that ramp would have out of
//     * the full list of 30 ramps (each with 8 colors). The first ramp, which goes from white to black, takes up index 16
//     * to index 23. Before that, there's various special-use colors, such as invisible connectors for joining parts of
//     * some larger model, and a reserved black outline for when solid black surrounds the edges of a render.
//     */
//    public static final OrderedMap<String, Integer> RINSED_NAMES = OrderedMap.makeMap(
//            "Transparent", 0, "Shadow", 1, "Black Outline", 2, "Outlined Glass", 3,
//            "Gleaming Eyes", 4, "Green Placeholder", 5, "Blue Placeholder", 6, "Dark Placeholder", 7,
//            "Connector A", 8, "Connector B", 9, "Connector C", 10, "Connector D", 11,
//            "Connector E", 12, "Connector F", 13, "Connector G", 14, "Connector H", 15,
//            //0
//            "Gray 0", 16, "Gray 1", 17, "Gray 2", 18, "Gray 3", 19,
//            "Gray 4", 20, "Gray 5", 21, "Gray 6", 22, "Gray 7", 23,
//            //1
//            "Blush Skin 0", 24, "Blush Skin 1", 25, "Blush Skin 2", 26, "Blush Skin 3", 27,
//            "Blush Skin 4", 28, "Blush Skin 5", 29, "Blush Skin 6", 30, "Blush Skin 7", 31,
//            //2
//            "Dark Deepening Skin 0", 32, "Dark Deepening Skin 1", 33, "Dark Deepening Skin 2", 34, "Dark Deepening Skin 3", 35,
//            "Dark Deepening Skin 4", 36, "Dark Deepening Skin 5", 37, "Dark Deepening Skin 6", 38, "Dark Deepening Skin 7", 39,
//            //3
//            "Warm Skin 0", 40, "Warm Skin 1", 41, "Warm Skin 2", 42, "Warm Skin 3", 43,
//            "Warm Skin 4", 44, "Warm Skin 5", 45, "Warm Skin 6", 46, "Warm Skin 7", 47,
//            //4
//            "Dark Skin 0", 48, "Dark Skin 1", 49, "Dark Skin 2", 50, "Dark Skin 3", 51,
//            "Dark Skin 4", 52, "Dark Skin 5", 53, "Dark Skin 6", 54, "Dark Skin 7", 55,
//            //5
//            "Bold Skin 0", 56, "Bold Skin 1", 57, "Bold Skin 2", 58, "Bold Skin 3", 59,
//            "Bold Skin 4", 60, "Bold Skin 5", 61, "Bold Skin 6", 62, "Bold Skin 7", 63,
//            //6
//            "Light Deepening Skin 0", 64, "Light Deepening Skin 1", 65, "Light Deepening Skin 2", 66, "Light Deepening Skin 3", 67,
//            "Light Deepening Skin 4", 68, "Light Deepening Skin 5", 69, "Light Deepening Skin 6", 70, "Light Deepening Skin 7", 71,
//            //7
//            "Yellow Orange 0", 72, "Yellow Orange 1", 73, "Yellow Orange 2", 74, "Yellow Orange 3", 75,
//            "Yellow Orange 4", 76, "Yellow Orange 5", 77, "Yellow Orange 6", 78, "Yellow Orange 7", 79,
//            //8
//            "Wood 0", 80, "Wood 1", 81, "Wood 2", 82, "Wood 3", 83,
//            "Wood 4", 84, "Wood 5", 85, "Wood 6", 86, "Wood 7", 87,
//            //9
//            "Discolored Gray 0", 88, "Discolored Gray 1", 89, "Discolored Gray 2", 90, "Discolored Gray 3", 91,
//            "Discolored Gray 4", 92, "Discolored Gray 5", 93, "Discolored Gray 6", 94, "Discolored Gray 7", 95,
//            //10
//            "Bronze Skin 0", 96, "Bronze Skin 1", 97, "Bronze Skin 2", 98, "Bronze Skin 3", 99,
//            "Bronze Skin 4", 100, "Bronze Skin 5", 101, "Bronze Skin 6", 102, "Bronze Skin 7", 103,
//            //11
//            "Gold Fur 0", 104, "Gold Fur 1", 105, "Gold Fur 2", 106, "Gold Fur 3", 107,
//            "Gold Fur 4", 108, "Gold Fur 5", 109, "Gold Fur 6", 110, "Gold Fur 7", 111,
//            //12
//            "Fire 0", 112, "Fire 1", 113, "Fire 2", 114, "Fire 3", 115,
//            "Fire 4", 116, "Fire 5", 117, "Fire 6", 118, "Fire 7", 119,
//            //13
//            "Avocado 0", 120, "Avocado 1", 121, "Avocado 2", 122, "Avocado 3", 123,
//            "Avocado 4", 124, "Avocado 5", 125, "Avocado 6", 126, "Avocado 7", 127,
//            //14
//            "Dull Green 0", 128, "Dull Green 1", 129, "Dull Green 2", 130, "Dull Green 3", 131,
//            "Dull Green 4", 132, "Dull Green 5", 133, "Dull Green 6", 134, "Dull Green 7", 135,
//            //15
//            "Vivid Green 0", 136, "Vivid Green 1", 137, "Vivid Green 2", 138, "Vivid Green 3", 139,
//            "Vivid Green 4", 140, "Vivid Green 5", 141, "Vivid Green 6", 142, "Vivid Green 7", 143,
//            //16
//            "Gray Green 0", 144, "Gray Green 1", 145, "Gray Green 2", 146, "Gray Green 3", 147,
//            "Gray Green 4", 148, "Gray Green 5", 149, "Gray Green 6", 150, "Gray Green 7", 151,
//            //17
//            "Cold Forest 0", 152, "Cold Forest 1", 153, "Cold Forest 2", 154, "Cold Forest 3", 155,
//            "Cold Forest 4", 156, "Cold Forest 5", 157, "Cold Forest 6", 158, "Cold Forest 7", 159,
//            //18
//            "Turquoise 0", 160, "Turquoise 1", 161, "Turquoise 2", 162, "Turquoise 3", 163,
//            "Turquoise 4", 164, "Turquoise 5", 165, "Turquoise 6", 166, "Turquoise 7", 167,
//            //19
//            "Coastal Water 0", 168, "Coastal Water 1", 169, "Coastal Water 2", 170, "Coastal Water 3", 171,
//            "Coastal Water 4", 172, "Coastal Water 5", 173, "Coastal Water 6", 174, "Coastal Water 7", 175,
//            //20
//            "Ice 0", 176, "Ice 1", 177, "Ice 2", 178, "Ice 3", 179,
//            "Ice 4", 180, "Ice 5", 181, "Ice 6", 182, "Ice 7", 183,
//            //21
//            "Powder Blue 0", 184, "Powder Blue 1", 185, "Powder Blue 2", 186, "Powder Blue 3", 187,
//            "Powder Blue 4", 188, "Powder Blue 5", 189, "Powder Blue 6", 190, "Powder Blue 7", 191,
//            //22
//            "Dusty Gray 0", 192, "Dusty Gray 1", 193, "Dusty Gray 2", 194, "Dusty Gray 3", 195,
//            "Dusty Gray 4", 196, "Dusty Gray 5", 197, "Dusty Gray 6", 198, "Dusty Gray 7", 199,
//            //23
//            "Blue Steel 0", 200, "Blue Steel 1", 201, "Blue Steel 2", 202, "Blue Steel 3", 203,
//            "Blue Steel 4", 204, "Blue Steel 5", 205, "Blue Steel 6", 206, "Blue Steel 7", 207,
//            //24
//            "Lavender 0", 208, "Lavender 1", 209, "Lavender 2", 210, "Lavender 3", 211,
//            "Lavender 4", 212, "Lavender 5", 213, "Lavender 6", 214, "Lavender 7", 215,
//            //25
//            "Heliotrope 0", 216, "Heliotrope 1", 217, "Heliotrope 2", 218, "Heliotrope 3", 219,
//            "Heliotrope 4", 220, "Heliotrope 5", 221, "Heliotrope 6", 222, "Heliotrope 7", 223,
//            //26
//            "Purple 0", 224, "Purple 1", 225, "Purple 2", 226, "Purple 3", 227,
//            "Purple 4", 228, "Purple 5", 229, "Purple 6", 230, "Purple 7", 231,
//            //27
//            "Hot Pink 0", 232, "Hot Pink 1", 233, "Hot Pink 2", 234, "Hot Pink 3", 235,
//            "Hot Pink 4", 236, "Hot Pink 5", 237, "Hot Pink 6", 238, "Hot Pink 7", 239,
//            //28
//            "Withered Plum 0", 240, "Withered Plum 1", 241, "Withered Plum 2", 242, "Withered Plum 3", 243,
//            "Withered Plum 4", 244, "Withered Plum 5", 245, "Withered Plum 6", 246, "Withered Plum 7", 247,
//            //29
//            "Red 0", 248, "Red 1", 249, "Red 2", 250, "Red 3", 251,
//            "Red 4", 252, "Red 5", 253, "Red 6", 254, "Red 7", 255);
//    
//    public static final int[] PURE = {
//            0x00000000, 
//            0x000000FF, 0x202020FF, 0x404040FF, 0x606060FF, 0x808080FF, 0xA0A0A0FF, 0xC0C0C0FF, 0xE0E0E0FF, 0xFFFFFFFF, //Gray
//            0xBEAE97FF, 0xB0968AFF, 0x89756EFF, 0x6E5A54FF, 0x4F413CFF, 0x413534FF, 0x2F2525FF, 0x1C1415FF, //Dark Skin
//            0xFDFE9CFF, 0xFDD7AAFF, 0xE9BBA4FF, 0xC9A09DFF, 0xB7889AFF, 0x957088FF, 0x755B7BFF, 0x514265FF, //Light Deepening Skin
//            0xDDBBA4FF, 0xC0A68FFF, 0x9F8871FF, 0x7F6B5CFF, 0x6B5755FF, 0x5D464CFF, 0x482F3DFF, 0x30232DFF, //Wood
//            0xFDFCB7FF, 0xFCFA3CFF, 0xFAD725FF, 0xF5B325FF, 0xD7853CFF, 0xB25345FF, 0x8A2B2BFF, 0x67160AFF, //Fire
//            //0x8DC655FF, 0x7BA838FF, 0x6C8A37FF, 0x5D733AFF, 0x4F633CFF, 0x3F5244FF, 0x323D4AFF, 0x232A45FF, //Dull Green
//            0xADD54BFF, 0x80B040FF, 0x599135FF, 0x35761AFF, 0x2A621FFF, 0x1E5220FF, 0x063824FF, 0x012B1DFF, //Vivid Green
//            0x97D6F9FF, 0x3EB0CAFF, 0x3C919FFF, 0x0A737CFF, 0x226171FF, 0x0B505FFF, 0x0D3948FF, 0x052935FF, //Coastal Water
//            0x8391C1FF, 0x7181CAFF, 0x5E71BEFF, 0x555FA2FF, 0x424C84FF, 0x323B6DFF, 0x2B325CFF, 0x292349FF, //Blue Steel
//            0xE3D1FDFF, 0xBAABFAFF, 0x9F94E2FF, 0x9588D7FF, 0x7B71B3FF, 0x675E9CFF, 0x4F4D7CFF, 0x333158FF, //Lavender
//            //0xF7C1E7FF, 0xD791C6FF, 0xBB6FAAFF, 0xAF6190FF, 0x924B76FF, 0x623155FF, 0x47253FFF, 0x2F0E25FF, //Purple
//            0xFCD9FBFF, 0xFDB8C7FF, 0xFD97AAFF, 0xF46E7EFF, 0xC65365FF, 0x9E303CFF, 0x741B28FF, 0x50071AFF, //Red
//    };

    public static final int[] DB8 = {
        0x00000000, 0x000000FF, 0x55415FFF, 0x646964FF, 0xD77355FF, 0x508CD7FF, 0x64B964FF, 0xE6C86EFF, 0xDCF5FFFF,
    };

    /**
     * DawnBringer16 palette, plus transparent first. Has slight changes to match the palette used in DawnLike.
     */
    public static final int[] DB16 = {
            0x00000000,
            0x140C1CFF, 0x452434FF, 0x30346DFF, 0x4D494DFF, 0x864D30FF, 0x346524FF, 0xD34549FF, 0x757161FF,
            0x597DCFFF, 0xD37D2CFF, 0x8696A2FF, 0x6DAA2CFF, 0xD3AA9AFF, 0x6DC3CBFF, 0xDBD75DFF, 0xDFEFD7FF,
    };


    /**
     * DawnBringer32 palette, plus transparent first.
     */
    public static final int[] DB32 = {
            0x00000000,
            0x000000FF, 0x222034FF, 0x45283CFF, 0x663931FF, 0x8F563BFF, 0xDF7126FF, 0xD9A066FF, 0xEEC39AFF,
            0xFBF236FF, 0x99E550FF, 0x6ABE30FF, 0x37946EFF, 0x4B692FFF, 0x524B24FF, 0x323C39FF, 0x3F3F74FF,
            0x306082FF, 0x5B6EE1FF, 0x639BFFFF, 0x5FCDE4FF, 0xCBDBFCFF, 0xFFFFFFFF, 0x9BADB7FF, 0x847E87FF,
            0x696A6AFF, 0x595652FF, 0x76428AFF, 0xAC3232FF, 0xD95763FF, 0xD77BBAFF, 0x8F974AFF, 0x8A6F30FF,
    };

    public static final int[] GB = {
            //0x00000000, 0x000000FF, 0x5B5B5BFF, 0xA4A4A4FF, 0xFFFFFFFF,
            0x00000000, 0x252525FF, 0x6E6E6EFF, 0xB6B6B6FF, 0xFFFFFFFF,
    };

    public static final int[] GB_GREEN = {
            0x00000000, 0x081820FF, 0x346856FF, 0x88C070FF, 0xE0F8D0FF
    };
    public static final int[] GRAY16 = {
            0x00000000, 0x010101FF, 0x131313FF, 0x252525FF, 0x373737FF, 0x494949FF, 0x5B5B5BFF, 0x6E6E6EFF,
            0x808080FF, 0x929292FF, 0xA4A4A4FF, 0xB6B6B6FF, 0xC9C9C9FF, 0xDBDBDBFF, 0xEDEDEDFF, 0xFFFFFFFF,
    };
    public static final int[] GRAY8 = {
            0x00000000, 0x131313FF, 0x373737FF, 0x5B5B5BFF, 
            0x808080FF, 0xA4A4A4FF, 0xC9C9C9FF, 0xEDEDEDFF,
    };
    public static final int[] AZURESTAR33 = new int[]{
            0x00000000,
            0x15111BFF, 0x112D19FF, 0x372B26FF, 0x553549FF, 0x45644FFF, 0x6E6550FF, 0xC6B5A5FF, 0xC37C6BFF,
            0xDD997EFF, 0x9A765EFF, 0xEFCBB3FF, 0xE9B58CFF, 0xFFEDD4FF, 0xE1AD56FF, 0xF7DFAAFF, 0xBBD18AFF,
            0x557A41FF, 0x355525FF, 0x62966AFF, 0x86BB9AFF, 0x15452DFF, 0x396A76FF, 0x86A2B7FF, 0x92B3DBFF,
            0x6672BFFF, 0x3D4186FF, 0x9A76BFFF, 0x925EA2FF, 0xC7A2CFFF, 0xA24D72FF, 0xE3A6BBFF, 0xC38E92FF
    };

    // Azurestar33 Ramps
    // organized from darkest to lightest, with the color being adjusted in the second-to-last spot.
    public static final byte[][] AZURESTAR_RAMPS = new byte[][]{
            {0x00, 0x00, 0x00, 0x00,},
            {0x01, 0x01, 0x01, 0x03,},
            {0x01, 0x01, 0x02, 0x15,},
            {0x01, 0x01, 0x03, 0x04,},
            {0x01, 0x03, 0x04, 0x1E,},
            {0x02, 0x15, 0x05, 0x16,},
            {0x01, 0x03, 0x06, 0x0A,},
            {0x0A, 0x20, 0x07, 0x0B,},
            {0x04, 0x1E, 0x08, 0x09,},
            {0x1E, 0x08, 0x09, 0x0C,},
            {0x03, 0x06, 0x0A, 0x08,},
            {0x20, 0x07, 0x0B, 0x0D,},
            {0x08, 0x09, 0x0C, 0x0B,},
            {0x07, 0x0B, 0x0D, 0x0D,},
            {0x06, 0x0A, 0x0E, 0x0C,},
            {0x09, 0x0C, 0x0F, 0x0D,},
            {0x13, 0x14, 0x10, 0x0F,},
            {0x15, 0x12, 0x11, 0x13,},
            {0x02, 0x15, 0x12, 0x11,},
            {0x12, 0x11, 0x13, 0x14,},
            {0x11, 0x13, 0x14, 0x10,},
            {0x01, 0x02, 0x15, 0x05,},
            {0x02, 0x15, 0x16, 0x17,},
            {0x15, 0x16, 0x17, 0x18,},
            {0x15, 0x16, 0x18, 0x0D,},
            {0x01, 0x1A, 0x19, 0x18,},
            {0x01, 0x01, 0x1A, 0x19,},
            {0x04, 0x1E, 0x1B, 0x1D,},
            {0x03, 0x04, 0x1C, 0x1B,},
            {0x1E, 0x1B, 0x1D, 0x1F,},
            {0x03, 0x04, 0x1E, 0x20,},
            {0x0A, 0x20, 0x1F, 0x0B,},
            {0x06, 0x0A, 0x20, 0x1F,},
    };
    /**
     * <a href="https://i.imgur.com/QzvjODC.png">Looks like this</a> (that also shows the ramps).
     */
    public static final int[] SPLAY32 = new int[]{
            0x00000000, 0x383838FF, 0x565E5EFF, 0x808080FF, 0x997274FF, 0x997F72FF, 0x999472FF, 0x729972FF,
            0x727699FF, 0x997298FF, 0x889F9FFF, 0xBCBCBCFF, 0xB0D7D7FF, 0xF2F2F2FF, 0xE59C78FF, 0xBF724CFF,
            0x66493AFF, 0x66603AFF, 0xBFB14CFF, 0xE5D878FF, 0x3A663AFF, 0x4CBF4CFF, 0x78E578FF, 0x3A3F66FF,
            0x4C58BFFF, 0x7883E5FF, 0xBF4CBFFF, 0xE578E5FF, 0x663A65FF, 0x663A3CFF, 0xE5787CFF, 0xBF4C50FF
    };

    // organized from darkest to lightest, with the color being adjusted in the second-to-last spot.
    public static final byte[][] SPLAY_RAMPS = new byte[][]{
            {0x00, 0x00, 0x00, 0x00},
            {0x01, 0x01, 0x01, 0x02},
            {0x01, 0x01, 0x02, 0x03},
            {0x01, 0x02, 0x03, 0x0A},
            {0x01, 0x10, 0x04, 0x05},
            {0x01, 0x10, 0x05, 0x06},
            {0x10, 0x11, 0x06, 0x0B},
            {0x01, 0x14, 0x07, 0x0A},
            {0x01, 0x17, 0x08, 0x03},
            {0x01, 0x1C, 0x09, 0x19},
            {0x02, 0x03, 0x0A, 0x0B},
            {0x03, 0x0A, 0x0B, 0x0D},
            {0x03, 0x0A, 0x0C, 0x0D},
            {0x0A, 0x0B, 0x0D, 0x0D},
            {0x10, 0x0F, 0x0E, 0x0B},
            {0x01, 0x10, 0x0F, 0x0E},
            {0x01, 0x01, 0x10, 0x04},
            {0x01, 0x10, 0x11, 0x06},
            {0x11, 0x06, 0x12, 0x13},
            {0x06, 0x12, 0x13, 0x0D},
            {0x01, 0x01, 0x14, 0x07},
            {0x14, 0x07, 0x15, 0x16},
            {0x07, 0x15, 0x16, 0x0D},
            {0x01, 0x01, 0x17, 0x08},
            {0x01, 0x17, 0x18, 0x19},
            {0x17, 0x18, 0x19, 0x0B},
            {0x01, 0x1C, 0x1A, 0x1B},
            {0x1C, 0x1A, 0x1B, 0x0E},
            {0x01, 0x01, 0x1C, 0x09},
            {0x01, 0x01, 0x1D, 0x10},
            {0x1D, 0x1F, 0x1E, 0x0E},
            {0x01, 0x1D, 0x1F, 0x1E},
    };

    /**
     * Another one of DawnBringer's palettes, winner of PixelJoint's 2017 22-color palette competition.
     * This has transparent at the start so it has 23 items.
     */
    public static final int[] DB_ISO22 = {
            0x00000000, 0x0C0816FF, 0x4C4138FF, 0x70503AFF,
            0xBC5F4EFF, 0xCE9148FF, 0xE4DA6CFF, 0x90C446FF,
            0x698E34FF, 0x4D613CFF, 0x26323CFF, 0x2C4B73FF,
            0x3C7373FF, 0x558DDEFF, 0x74BAEAFF, 0xF0FAFFFF,
            0xCFB690FF, 0xB67C74FF, 0x845A78FF, 0x555461FF,
            0x746658FF, 0x6B7B89FF, 0x939388FF
    };
    
    public static final int[] JAPANESE_WOODBLOCK = {
            0x00000000, 0x2B2821FF, 0x624C3CFF, 0xD9AC8BFF, 0xE3CFB4FF, 0x243D5CFF, 0x5D7275FF, 0x5C8B93FF,
            0xB1A58DFF, 0xB03A48FF, 0xD4804DFF, 0xE0C872FF, 0x3E6958FF,
    };

    /**
     * Manually-edited version of the 64-color BLK-NX64 palette, which was made by BLK for pixel art. This reduces
     * the gray-red and purple coverage of BLK-NX64, and improves its coverage of specific shades of peach and brown
     * (human skin tones), yellow, chartreuse, and gray. Repeats the first 64 colors in four blocks, with the exception
     * of the first color (transparent, which changes to black in the repeated blocks).
     * <a href="https://i.imgur.com/LFpwaJl.png">Image preview</a>.
     */
    public static final int[] BETTS64 = {
            0x00000000, 0x010101FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
            0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
            0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
            0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
            0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
            0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
            0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
            0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,

            0x000000FF, 0x010101FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
            0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
            0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
            0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
            0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
            0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
            0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
            0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,

            0x000000FF, 0x010101FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
            0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
            0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
            0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
            0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
            0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
            0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
            0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,

            0x000000FF, 0x010101FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
            0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
            0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
            0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
            0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
            0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
            0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
            0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,
    };

    public static final byte[][] BETTS_RAMPS = {
            {0x00, 0x00, 0x00, 0x00,},
            {0x01, 0x01, 0x01, 0x02,},
            {0x01, 0x01, 0x02, 0x15,},
            {0x01, 0x02, 0x03, 0x3A,},
            {0x02, 0x03, 0x04, 0x05,},
            {0x03, 0x04, 0x05, 0x06,},
            {0x04, 0x05, 0x06, 0x07,},
            {0x05, 0x06, 0x07, 0x07,},
            {0x0B, 0x0A, 0x08, 0x11,},
            {0x0B, 0x0A, 0x09, 0x08,},
            {0x0D, 0x0B, 0x0A, 0x08,},
            {0x0C, 0x0D, 0x0B, 0x0A,},
            {0x1E, 0x15, 0x0C, 0x0D,},
            {0x15, 0x0C, 0x0D, 0x0E,},
            {0x0C, 0x0D, 0x0E, 0x0F,},
            {0x0D, 0x0E, 0x0F, 0x10,},
            {0x0E, 0x0F, 0x10, 0x11,},
            {0x0F, 0x10, 0x11, 0x12,},
            {0x14, 0x13, 0x12, 0x07,},
            {0x0C, 0x14, 0x13, 0x12,},
            {0x15, 0x0C, 0x14, 0x13,},
            {0x01, 0x1E, 0x15, 0x16,},
            {0x1E, 0x15, 0x16, 0x17,},
            {0x15, 0x16, 0x17, 0x18,},
            {0x16, 0x17, 0x18, 0x19,},
            {0x17, 0x18, 0x19, 0x07,},
            {0x1C, 0x1B, 0x1A, 0x19,},
            {0x1D, 0x1C, 0x1B, 0x1A,},
            {0x26, 0x1D, 0x1C, 0x24,},
            {0x1E, 0x26, 0x1D, 0x1C,},
            {0x01, 0x01, 0x1E, 0x02,},
            {0x1E, 0x26, 0x1F, 0x20,},
            {0x26, 0x1F, 0x20, 0x21,},
            {0x1F, 0x20, 0x21, 0x22,},
            {0x20, 0x21, 0x22, 0x2C,},
            {0x25, 0x24, 0x23, 0x2A,},
            {0x26, 0x25, 0x24, 0x23,},
            {0x1E, 0x26, 0x25, 0x24,},
            {0x01, 0x1E, 0x26, 0x1D,},
            {0x01, 0x02, 0x27, 0x39,},
            {0x02, 0x27, 0x28, 0x29,},
            {0x27, 0x28, 0x29, 0x2A,},
            {0x28, 0x29, 0x2A, 0x2B,},
            {0x29, 0x2A, 0x2B, 0x22,},
            {0x2E, 0x2D, 0x2C, 0x07,},
            {0x2F, 0x2E, 0x2D, 0x2C,},
            {0x3A, 0x2F, 0x2E, 0x2D,},
            {0x38, 0x3A, 0x2F, 0x2E,},
            {0x38, 0x37, 0x30, 0x31,},
            {0x37, 0x30, 0x31, 0x32,},
            {0x30, 0x31, 0x32, 0x3D,},
            {0x36, 0x35, 0x33, 0x3F,},
            {0x37, 0x36, 0x34, 0x33,},
            {0x37, 0x36, 0x35, 0x34,},
            {0x38, 0x37, 0x36, 0x35,},
            {0x02, 0x38, 0x37, 0x36,},
            {0x01, 0x02, 0x38, 0x37,},
            {0x02, 0x27, 0x39, 0x36,},
            {0x02, 0x38, 0x3A, 0x3B,},
            {0x38, 0x3A, 0x3B, 0x04,},
            {0x3A, 0x3B, 0x3C, 0x35,},
            {0x0B, 0x0A, 0x3D, 0x3E,},
            {0x0A, 0x3D, 0x3E, 0x3F,},
            {0x35, 0x33, 0x3F, 0x07,},
    };

    public static final int[] FANCY_BETTS64 = new int[256];

    public static final int[] FULL_GRAY = new int[256];
    static {
        System.arraycopy(BETTS64, 0, FANCY_BETTS64, 0, 256);
        for (int i = 1; i < 64; i++) {
            FANCY_BETTS64[i | 64] = lighten(BETTS64[i], 0.1f);
            FANCY_BETTS64[i | 128] = darken(BETTS64[i], 0.15f);
            FANCY_BETTS64[i | 192] = darken(BETTS64[i], 0.3f);
        }
        for (int i = 1; i < 256; i++) {
            FULL_GRAY[i] = i * 0x01010100 | 0xFF;
        }
    }

    /**
     * This contains all of {@link #BETTS64}, plus 192 more colors.
     * Meant for palette reductions that should accurately preserve the BETTS64 colors.
     */
    public static final int[] BETSY256 = new int[] {
            0x00000000, 0x000000FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
            0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
            0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
            0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
            0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
            0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
            0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
            0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,
            0xC99A14FF, 0xFEC64CFF, 0xC29D48FF, 0xBA7825FF, 0xFFAA4DFF, 0xD39A5EFF, 0xEEA45CFF, 0xD1AB8CFF,
            0xAD6329FF, 0xD78350FF, 0xB15301FF, 0xE35A00FF, 0xCF5E2CFF, 0x672F16FF, 0xAA5635FF, 0xC73908FF,
            0xA23111FF, 0x9C5A4DFF, 0xFB6440FF, 0xA47F71FF, 0x8B1005FF, 0xF58D7CFF, 0xC61300FF, 0x7B2921FF,
            0xED6858FF, 0x66090EFF, 0x933529FF, 0xE73129FF, 0xB71719FF, 0xE79C94FF, 0xBF3C3DFF, 0xF80334FF,
            0xC86160FF, 0xD08684FF, 0xEB4250FF, 0xA81A31FF, 0xD52144FF, 0xF46774FF, 0xEA064CFF, 0x580D26FF,
            0xD66B7BFF, 0xB01A4DFF, 0x2C0613FF, 0xDD4668FF, 0xF22B70FF, 0xCF1562FF, 0x8C385DFF, 0x845A6BFF,
            0xE7298CFF, 0xB6036DFF, 0x60324AFF, 0xD76FA4FF, 0x751752FF, 0xD40D98FF, 0x49103EFF, 0xBF2891FF,
            0xAA4289FF, 0xF353C8FF, 0x945D81FF, 0x93217DFF, 0xDC32BCFF, 0xDF94C8FF, 0xF917E0FF, 0xC74DB4FF,
            0xE773D6FF, 0xFC78ECFF, 0xAF06A1FF, 0x9A2099FF, 0xE557E0FF, 0xD631DEFF, 0xB82BC5FF, 0xEA1AF8FF,
            0x9B46A1FF, 0x6B1873FF, 0x50105AFF, 0x9C29B5FF, 0xBE14E5FF, 0xC050E8FF, 0xD897FCFF, 0x513562FF,
            0xA36BC5FF, 0xCEADE7FF, 0x7D28CAFF, 0x5F1E9EFF, 0x9C6EF9FF, 0xAC90E9FF, 0xBBB2D9FF, 0x6843C2FF,
            0x7F64CEFF, 0x762BFEFF, 0x8E86BDFF, 0x6329E7FF, 0x4A3896FF, 0x5F0AF2FF, 0x5A5A86FF, 0x21105AFF,
            0x626BFEFF, 0x29189CFF, 0xB3B3B3FF, 0x474747FF, 0xE9E9E9FF, 0x6B6B6BFF, 0x2C1ABFFF, 0x394ABDFF,
            0x2910DEFF, 0xC4D7FCFF, 0x4461D2FF, 0x88AEF9FF, 0x2643FBFF, 0x1E3283FF, 0x0838CFFF, 0x627FAAFF,
            0x115DF3FF, 0x012757FF, 0x29426BFF, 0x2757A7FF, 0x185ABFFF, 0x207FE3FF, 0x396B9CFF, 0x3D78B3FF,
            0x6BA4CEFF, 0x0B9ADBFF, 0x81C5D9FF, 0x42A5C6FF, 0xAFC7CFFF, 0x6E868EFF, 0x52CEEFFF, 0x39BDC6FF,
            0x23E1EFFF, 0xAFF2F5FF, 0x082423FF, 0x83EBE1FF, 0x21938FFF, 0x7AC6BEFF, 0x104947FF, 0x49B39AFF,
            0x296B5AFF, 0x319E7AFF, 0x41FFC6FF, 0x65E1B6FF, 0x39DAA3FF, 0x038963FF, 0x537166FF, 0x31B57FFF,
            0x24F59BFF, 0x49FF8AFF, 0x06EB6FFF, 0x39AD5AFF, 0x6BB87AFF, 0x378D43FF, 0x83FF8DFF, 0xD6F7D6FF,
            0x809D81FF, 0x4C724AFF, 0x4FD456FF, 0x66F562FF, 0x07FF1BFF, 0x4AEF31FF, 0x46AF32FF, 0x39C621FF,
            0x7BDA6AFF, 0x29A407FF, 0x97BF8DFF, 0x62FF39FF, 0x45892AFF, 0x639356FF, 0x314A29FF, 0x16210BFF,
            0x213118FF, 0x64CD0AFF, 0x7BEE16FF, 0x72B546FF, 0x99F841FF, 0xBFEF94FF, 0x96DF1DFF, 0x9FD005FF,
            0xC7FF2DFF, 0x8CAD29FF, 0xA6B925FF, 0x6B7321FF, 0xBCC685FF, 0xDAE45CFF, 0x969735FF, 0xCBC26CFF,
            0xBDB573FF, 0x52490EFF, 0xFBE76AFF, 0xA58C29FF, 0xDAD0B0FF, 0x8E7211FF, 0xEFCA64FF, 0x867545FF,
    };

    /**
     * A nice and versatile geometric palette that has extremely broad coverage of the most saturated colors and some of
     * the least-saturated colors.
     */
    public static final int[] YAM256 = {
            0x00000000, 0x000000FF, 0x050403FF, 0x0F0D0CFF, 0x1A1817FF, 0x292625FF, 0x393534FF, 0x4A4645FF,
            0x5C5957FF, 0x726E6CFF, 0x878381FF, 0x9D9997FF, 0xB6B2B0FF, 0xCFCAC8FF, 0xE9E4E2FF, 0xFBFFFFFF,
            0x2B1C1BFF, 0x574241FF, 0x8C7472FF, 0xC9ADAAFF, 0x2D231CFF, 0x594D44FF, 0x8F8176FF, 0xCCBCB0FF,
            0x2D241DFF, 0x5B4F46FF, 0x908277FF, 0xCFBEB2FF, 0x2E2820FF, 0x5C554BFF, 0x938B7EFF, 0xD3CABCFF,
            0x323425FF, 0x626451FF, 0x9A9D87FF, 0xD9DCC4FF, 0x293523FF, 0x56644FFF, 0x8C9C83FF, 0xCADCC0FF,
            0x1D2F21FF, 0x405645FF, 0x6A836FFF, 0x9BB6A0FF, 0x1F3335FF, 0x4A6264FF, 0x809B9EFF, 0xBDDCDFFF,
            0x0F1B2BFF, 0x334459FF, 0x637690FF, 0x9BB1CEFF, 0x1D182CFF, 0x45405AFF, 0x777090FF, 0xB2AACFFF,
            0x251B2EFF, 0x4F435BFF, 0x837491FF, 0xBFAFD0FF, 0x2C1D2EFF, 0x5A475CFF, 0x907A93FF, 0xCFB5D2FF,
            0x662F28FF, 0x98584EFF, 0xCE8579FF, 0x663B28FF, 0x986650FF, 0xD0977EFF, 0x68412CFF, 0x9A6C54FF,
            0xD3A085FF, 0x68452FFF, 0x9A7258FF, 0xD0A386FF, 0x6A4A2DFF, 0x9C7756FF, 0xD3AA85FF, 0x6C5131FF,
            0x9E7F5BFF, 0xD7B58DFF, 0x6A5A36FF, 0x9E8B63FF, 0xD7C296FF, 0x6E6C3DFF, 0xA19F6AFF, 0xDAD89EFF,
            0x67753BFF, 0x98A868FF, 0xD0E29CFF, 0x59703BFF, 0x8BA56AFF, 0xC2DF9EFF, 0x4C6F39FF, 0x7BA366FF,
            0xB0DD99FF, 0x366F35FF, 0x64A362FF, 0x97DD94FF, 0x346C4FFF, 0x569271FF, 0x7CBC98FF, 0x2B665DFF,
            0x49877DFF, 0x69AAA0FF, 0x326672FF, 0x5E97A5FF, 0x92CFDFFF, 0x294B6CFF, 0x52789FFF, 0x81ACD7FF,
            0x1D2565FF, 0x3E4D97FF, 0x667ACEFF, 0x312663FF, 0x584E95FF, 0x877ECEFF, 0x422866FF, 0x6C5199FF,
            0x9D7ED0FF, 0x492A66FF, 0x765399FF, 0xA983D1FF, 0x552B67FF, 0x845499FF, 0xBA85D3FF, 0x5E2E69FF,
            0x90599CFF, 0xC789D4FF, 0x692B54FF, 0x9B5382FF, 0xD382B5FF, 0x672B34FF, 0x99535CFF, 0xCF8088FF,
            0xB0342EFF, 0xDB554BFF, 0xB1432EFF, 0xDC654CFF, 0xB0512CFF, 0xDD754EFF, 0xB25D33FF, 0xDE8155FF,
            0xB3612EFF, 0xDF8650FF, 0xB56832FF, 0xDE8B53FF, 0xB36731FF, 0xE08C54FF, 0xB06F35FF, 0xDF975AFF,
            0xB47B35FF, 0xE0A259FF, 0xB4863CFF, 0xDEAD5FFF, 0xB0923AFF, 0xDEBE62FF, 0xB4A740FF, 0xE1D468FF,
            0xB4C048FF, 0xDDEC6FFF, 0xA7BD4CFF, 0xD0EA73FF, 0x95BA47FF, 0xBFE86FFF, 0x82BE46FF, 0xA8E96BFF,
            0x6EBA40FF, 0x96E868FF, 0x50BD47FF, 0x76E86BFF, 0x30B24CFF, 0x47CA5FFF, 0x23A979FF, 0x30B482FF,
            0x2BAD9AFF, 0x44C4B1FF, 0x38BDC1FF, 0x63E7ECFF, 0x319DBCFF, 0x5AC7E8FF, 0x2D80B7FF, 0x51A7E2FF,
            0x1D44B0FF, 0x3967DCFF, 0x322CAFFF, 0x4B50DBFF, 0x4B2BB2FF, 0x684DDDFF, 0x662CB3FF, 0x8850DFFF,
            0x6D2FB3FF, 0x9052DFFF, 0x7A31B5FF, 0xA155E2FF, 0x8631B5FF, 0xAE56E2FF, 0x9431B1FF, 0xBE56DEFF,
            0x9F35B3FF, 0xCA5AE0FF, 0xAE36B6FF, 0xDB5CE3FF, 0xB33581FF, 0xDD56A4FF, 0xB33156FF, 0xDF5376FF,
            0xFD2918FF, 0xFA4411FF, 0xFD580BFF, 0xFC6A1AFF, 0xF8721EFF, 0xFD740EFF, 0xF9770FFF, 0xFA7E17FF,
            0xFA831BFF, 0xFD8F14FF, 0xFB9A1EFF, 0xFDA514FF, 0xF7B321FF, 0xF8C41FFF, 0xFDDC27FF, 0xFBF42CFF,
            0xEDFF21FF, 0xDAFF2FFF, 0xC9FF29FF, 0xAFFF21FF, 0x94FF19FF, 0x7AFF27FF, 0x49FF21FF, 0x00FF3CFF,
            0x00EE6EFF, 0x00DF9BFF, 0x00DFBBFF, 0x00EAE0FF, 0x00EBFFFF, 0x00CEFFFF, 0x00ADFFFF, 0x007EFFFF,
            0x2200FFFF, 0x4300FFFF, 0x5F00FFFF, 0x7900FFFF, 0x8F05FFFF, 0x9B13FEFF, 0xA600FFFF, 0xB510FFFF,
            0xBD15FFFF, 0xCA11FFFF, 0xE10AFFFF, 0xED16FCFF, 0xFD15DFFF, 0xFD1BA4FF, 0xFF1271FF, 0xFE173BFF,
    };

    /**
     * The sequel to Yam, with better differentiation between grayscale and desaturated colors. It also makes the band
     * with the most saturated colors somewhat more saturated in places where it wasn't enough before. Has 256 colors,
     * including pure transparent.
     */
    public static final int[] YAM2 = {
            0x00000000, 0x000000FF, 0x0B0909FF, 0x1C1A19FF, 0x302D2CFF, 0x464241FF, 0x5A5755FF, 0x6F6B6AFF,
            0x847F7EFF, 0x999492FF, 0xACA7A5FF, 0xBEB9B7FF, 0xD1CCCAFF, 0xE2DDDBFF, 0xF3EEEBFF, 0xFFFDFBFF,
            0x3D1913FF, 0x7C4C43FF, 0xB98076FF, 0xEFB0A4FF, 0x342620FF, 0x6F5C54FF, 0xA89289FF, 0xDCC4BAFF,
            0x3B2414FF, 0x7B5D48FF, 0xB8957DFF, 0xEEC8ADFF, 0x392E19FF, 0x776A4FFF, 0xB1A183FF, 0xE6D5B4FF,
            0x353914FF, 0x73794DFF, 0xADB482FF, 0xE2EBB4FF, 0x27391DFF, 0x627955FF, 0x9AB58CFF, 0xCDEABDFF,
            0x14391AFF, 0x457049FF, 0x73A478FF, 0x9FD4A4FF, 0x173B3FFF, 0x50797EFF, 0x87B5BBFF, 0xB8EAF0FF,
            0x0A1A42FF, 0x364F82FF, 0x6583BDFF, 0x92B3F4FF, 0x271B3EFF, 0x5D4F7DFF, 0x9182B7FF, 0xC3B2EDFF,
            0x321941FF, 0x6D4E81FF, 0xA683BEFF, 0xDAB3F4FF, 0x3A1B3EFF, 0x78517DFF, 0xB486B9FF, 0xE9B7EFFF,
            0x79261AFF, 0xB55545FF, 0xEB816DFF, 0x74351EFF, 0xAE654AFF, 0xE49274FF, 0x6A4434FF, 0xA17461FF,
            0xD4A28DFF, 0x604C40FF, 0x978072FF, 0xC8AF9FFF, 0x7A491DFF, 0xB67D4DFF, 0xEBAD78FF, 0x725328FF,
            0xAF8A5AFF, 0xE5BD88FF, 0x765C20FF, 0xB29554FF, 0xE9CA83FF, 0x706E2AFF, 0xAEAC62FF, 0xE5E393FF,
            0x65761BFF, 0x9FB455FF, 0xD4EB85FF, 0x58742AFF, 0x90B15FFF, 0xC4E98FFF, 0x3F741CFF, 0x76B254FF,
            0xA8EA84FF, 0x28762CFF, 0x5EB25FFF, 0x8FE98EFF, 0x14754EFF, 0x47A679FF, 0x70D3A2FF, 0x156B65FF,
            0x459992FF, 0x6CC4BBFF, 0x00697CFF, 0x4AA5BAFF, 0x7CDBF2FF, 0x0F4A77FF, 0x4380B4FF, 0x71B3EDFF,
            0x1D217DFF, 0x4052BBFF, 0x6680F3FF, 0x362479FF, 0x6154B4FF, 0x8E81EDFF, 0x4B207FFF, 0x7C50BCFF,
            0xAC7EF4FF, 0x552779FF, 0x8855B3FF, 0xB982E9FF, 0x63237EFF, 0x9B55BAFF, 0xCE82F1FF, 0x702978FF,
            0xAA5AB3FF, 0xE089EAFF, 0x7A2061FF, 0xB64F95FF, 0xEC7BC6FF, 0x722431FF, 0xAE535EFF, 0xE47E88FF,
            0xBD2520FF, 0xEB4C40FF, 0xBA3D27FF, 0xE55F46FF, 0xBE4424FF, 0xEC6845FF, 0xA1614AFF, 0xCB846BFF,
            0xA76240FF, 0xD48963FF, 0xBA6130FF, 0xE78653FF, 0xBB6420FF, 0xEB8C48FF, 0xB67230FF, 0xE59B56FF,
            0xBB7721FF, 0xECA24CFF, 0xB58533FF, 0xE3B05AFF, 0xBE9923FF, 0xEAC24DFF, 0xBDAD3DFF, 0xEADA66FF,
            0xAFBA1DFF, 0xDFEC54FF, 0xA4BB37FF, 0xD1EB63FF, 0x8ABD26FF, 0xB6EE56FF, 0x78B937FF, 0xA4EB63FF,
            0x5FBA17FF, 0x8AEC4DFF, 0x41BA30FF, 0x6CEA5BFF, 0x00BC40FF, 0x25DB5AFF, 0x18B27FFF, 0x37C993FF,
            0x00B8A1FF, 0x25D6BDFF, 0x25BBBFFF, 0x5AEBEFFF, 0x009EC0FF, 0x41CBF0FF, 0x097ABAFF, 0x40A6ECFF,
            0x0024C0FF, 0x164CEFFF, 0x332DB7FF, 0x4C51E3FF, 0x4E22C1FF, 0x6E4CF3FF, 0x672DBBFF, 0x8B53EAFF,
            0x7823C5FF, 0x9E4BF4FF, 0x8130BFFF, 0xA755ECFF, 0x9123C7FF, 0xBB4EF7FF, 0x9B31BBFF, 0xC759EAFF,
            0xAF27C8FF, 0xDC51F6FF, 0xB435B9FF, 0xE35CE7FF, 0xBE2285FF, 0xEB49AAFF, 0xB82E56FF, 0xE45076FF,
            0xFF1B00FF, 0xF34428FF, 0xFC4400FF, 0xCD7758FF, 0xD7764CFF, 0xED7432FF, 0xC59171FF, 0xF87E26FF,
            0xF98000FF, 0xF49023FF, 0xFA9600FF, 0xF2A733FF, 0xF6AF00FF, 0xF9C834FF, 0xFEDD00FF, 0xFFF932FF,
            0xEDFF00FF, 0xD7FB38FF, 0xC1FE00FF, 0xACF829FF, 0x8CFF00FF, 0x72FC32FF, 0x2EFE00FF, 0x26FC45FF,
            0x00FF7EFF, 0x28F7B1FF, 0x00FBD4FF, 0x07FFF5FF, 0x00E7FEFF, 0x00C3F8FF, 0x00A6FFFF, 0x0070F2FF,
            0x2300FFFF, 0x3F25F1FF, 0x5F00FFFF, 0x7824F7FF, 0x9500FFFF, 0x9625FAFF, 0xAD00FFFF, 0xB32AFFFF,
            0xCA00FFFF, 0xC72BF8FF, 0xEB03FFFF, 0xEF33FFFF, 0xFE00E2FF, 0xF02D9CFF, 0xFF0070FF, 0xF62941FF,
    };

    public static final int[] YAM3 = new int[]{
            0x00000000, 0x000000FF, 0x0B0909FF, 0x1C1A19FF, 0x302D2CFF, 0x464241FF, 0x5A5755FF, 0x6F6B6AFF,
            0x847F7EFF, 0x999492FF, 0xACA7A5FF, 0xBEB9B7FF, 0xD1CCCAFF, 0xE2DDDBFF, 0xF3EEEBFF, 0xFFFDFBFF,
            0x62322CFF, 0x824C45FF, 0xA36760FF, 0xC7867DFF, 0xEBA69DFF, 0x644D47FF, 0x856B65FF, 0xA1867EFF,
            0xBC9F97FF, 0xDCBDB5FF, 0x664A37FF, 0x83644FFF, 0xA2816AFF, 0xC4A087FF, 0xE7C1A7FF, 0x6E5B43FF,
            0x937E64FF, 0xB19B7FFF, 0xCCB597FF, 0xE7CFB0FF, 0x66663DFF, 0x87875BFF, 0xA2A374FF, 0xC0C18FFF,
            0xE2E3AFFF, 0x4B5E38FF, 0x677D53FF, 0x869D70FF, 0xA6C090FF, 0xC9E4B1FF, 0x436E48FF, 0x639267FF,
            0x7EAF82FF, 0x95C899FF, 0xB1E7B5FF, 0x416766FF, 0x5D8585FF, 0x77A2A2FF, 0x95C2C1FF, 0xB4E4E3FF,
            0x2D4475FF, 0x4A659BFF, 0x6380BBFF, 0x7999D6FF, 0x8FB0F0FF, 0x4F416DFF, 0x6C5D8DFF, 0x8576A9FF,
            0x9F8FC6FF, 0xBEADE7FF, 0x573A6AFF, 0x735388FF, 0x906FA7FF, 0xB18DCAFF, 0xD4ADEEFF, 0x6D466CFF,
            0x916690FF, 0xAE80ADFF, 0xC898C7FF, 0xE5B2E4FF, 0x953229FF, 0xBC5044FF, 0xE77264FF, 0x885E4CFF,
            0xAA7D69FF, 0xCD9C87FF, 0x935C36FF, 0xB87B53FF, 0xE2A176FF, 0x9E7844FF, 0xC59D65FF, 0xE6BB80FF,
            0x90963DFF, 0xB4BB5EFF, 0xDAE280FF, 0x688D3FFF, 0x8BB460FF, 0xB4E086FF, 0x449F4DFF, 0x64C46CFF,
            0x83E68AFF, 0x489595FF, 0x69B9B8FF, 0x8CE1DFFF, 0x1D42A1FF, 0x3662C9FF, 0x4D7DEAFF, 0x654099FF,
            0x835CBCFF, 0xA37AE1FF, 0x7A3896FF, 0x9C56BCFF, 0xC479E6FF, 0x9A4799FF, 0xC167BFFF, 0xE182DFFF,
            0xC6221BFF, 0xDB362AFF, 0xF3493BFF, 0xB7503CFF, 0xC85D48FF, 0xDB6C56FF, 0xAF5B45FF, 0xC16A53FF,
            0xD77C63FF, 0xAC6A52FF, 0xC07B62FF, 0xD0886FFF, 0xB26B48FF, 0xC37A56FF, 0xD78B65FF, 0xB46C43FF,
            0xC87C52FF, 0xDD8E63FF, 0xC76D2AFF, 0xDD7F3CFF, 0xF0904BFF, 0xC5762FFF, 0xD8873FFF, 0xEF9B51FF,
            0xCB8223FF, 0xE19639FF, 0xF4A748FF, 0xC58C33FF, 0xD99E44FF, 0xEEB156FF, 0xC99D2AFF, 0xDCAF3DFF,
            0xF2C350FF, 0xCFB63EFF, 0xE4CA51FF, 0xF6DC61FF, 0xBEC22BFF, 0xD2D741FF, 0xE8ED56FF, 0xA9C13CFF,
            0xBCD650FF, 0xD3EE66FF, 0x9EC725FF, 0xB1DC3CFF, 0xC3F050FF, 0x89BF34FF, 0x9CD448FF, 0xB1EB5DFF,
            0x6AC829FF, 0x7EDE41FF, 0x8EF152FF, 0x54C339FF, 0x65D64BFF, 0x78EB5DFF, 0x29C742FF, 0x3FDA53FF,
            0x55F166FF, 0x49C88EFF, 0x5CDCA0FF, 0x6DEEB0FF, 0x2FC8ACFF, 0x44DBBDFF, 0x5AF0D2FF, 0x48C7C6FF,
            0x5DDDDCFF, 0x6EF0EEFF, 0x27A7CAFF, 0x3DBADEFF, 0x51CEF4FF, 0x2A81BDFF, 0x3B92D1FF, 0x50A8EAFF,
            0x002FCDFF, 0x0D41E1FF, 0x1950F4FF, 0x3834C0FF, 0x4143D2FF, 0x4E53E6FF, 0x5127C6FF, 0x603BDDFF,
            0x704FF6FF, 0x7536C2FF, 0x8446D6FF, 0x9455E9FF, 0x7E2ACDFF, 0x8E3CE0FF, 0xA04EF7FF, 0x8F39C5FF,
            0xA149DAFF, 0xB158ECFF, 0x9E2BCCFF, 0xB03DE0FF, 0xC44FF5FF, 0xA238C2FF, 0xB448D6FF, 0xCA5BEDFF,
            0xBE2FCEFF, 0xD443E4FF, 0xE653F6FF, 0xC139C2FF, 0xD449D4FF, 0xEA5CEAFF, 0xC72183FF, 0xDC3494FF,
            0xF347A7FF, 0xC43659FF, 0xD74567FF, 0xE95374FF, 0xFE000FFF, 0xE65239FF, 0xDA6746FF, 0xCF7859FF,
            0xE17C4BFF, 0xE58349FF, 0xF87C13FF, 0xF48A1EFF, 0xFC9500FF, 0xF6A727FF, 0xFFC400FF, 0xFFE12EFF,
            0xF3F900FF, 0xE0F826FF, 0xC4FD00FF, 0xA3F827FF, 0x75FC00FF, 0x49FA2AFF, 0x00FF3BFF, 0x31F7ABFF,
            0x00FFDAFF, 0x39F9F8FF, 0x00CCFEFF, 0x179BEFFF, 0x0000FFFF, 0x3F25F1FF, 0x6400FEFF, 0x8824F1FF,
            0x9D00FFFF, 0xAA28FAFF, 0xBF00FFFF, 0xCB25F8FF, 0xEC0FFFFF, 0xF42FFAFF, 0xFF00A9FF, 0xF52664FF,
    };

    public static final int[] TATER255 = new int[] {
            0x00000000, 0x000000FF, 0x282828FF, 0x585858FF, 0x868686FF, 0xA2A2A2FF, 0xCBCBCBFF, 0xFFFFFFFF,
            0xA6D755FF, 0x8ABF5EFF, 0x7AA221FF, 0x6E8A31FF, 0x0A4111FF, 0x0F661DFF, 0x147E25FF, 0x229E35FF,
            0x42C372FF, 0x8CE7A6FF, 0x78FAE6FF, 0x00C7A5FF, 0x009282FF, 0x163135FF, 0x21526BFF, 0x3B768FFF,
            0x53A1ADFF, 0x8CDAFFFF, 0x50AAF7FF, 0x3E83EBFF, 0x354AD7FF, 0x1D2DAAFF, 0x152135FF, 0x66397EFF,
            0x7E5596FF, 0xA68ABFFF, 0xDFBFEFFF, 0xC772FFFF, 0x9245E7FF, 0x6E05C3FF, 0x350082FF, 0x721C2FFF,
            0xB22E69FF, 0xE54286FF, 0xFF6EAFFF, 0xFF9AC7FF, 0xFFD7F3FF, 0xE3B3C3FF, 0xCB96A2FF, 0xAA768AFF,
            0xCF4929FF, 0xF3820DFF, 0xFFAA0DFF, 0xFFD3A6FF, 0xFFBB8AFF, 0xE7A67AFF, 0xBB7251FF, 0x82491DFF,
            0x513115FF, 0xB7515AFF, 0x6E5A51FF, 0x8A7A5AFF, 0xB79E5EFF, 0xDFC721FF, 0xFFDF00FF, 0xFFF3B3FF,
            0x050403FF, 0x0F0D0CFF, 0x1A1817FF, 0x251F12FF, 0x393534FF, 0x5C393EFF, 0x4A4645FF, 0x504D3CFF,
            0x614C48FF, 0x5F5643FF, 0x4D6272FF, 0x4F6951FF, 0x726E6CFF, 0x5E798DFF, 0x956C75FF, 0x6A8369FF,
            0xA77E77FF, 0x9C8C86FF, 0x7B9B80FF, 0x829AAEFF, 0xA69E87FF, 0xC1A588FF, 0x95B7D6FF, 0x9BBAA1FF,
            0xB6B2B0FF, 0xBDC1AEFF, 0xEBCABBFF, 0xB5E6F1FF, 0xECE0C0FF, 0x816925FF, 0xE0C166FF, 0x998F5DFF,
            0x8F7846FF, 0x695B1FFF, 0xBFA52BFF, 0xE4D668FF, 0xA39324FF, 0xF5F444FF, 0xF4FD27FF, 0xEEF481FF,
            0xBDC630FF, 0xD9FA3BFF, 0xA0B06AFF, 0xC4E159FF, 0x97B333FF, 0xC7F332FF, 0x5E7035FF, 0xAFF733FF,
            0x83CB35FF, 0xBDF789FF, 0x70B230FF, 0x7AA159FF, 0x94F734FF, 0x9DF376FF, 0x73F63CFF, 0xACD99CFF,
            0x2C5527FF, 0x4BFB26FF, 0x7FAB72FF, 0x32C129FF, 0x2CF02EFF, 0x142B13FF, 0x3DD24DFF, 0x66EF75FF,
            0x37EA5AFF, 0xA3F4B5FF, 0x7BC493FF, 0x27A265FF, 0x3C9063FF, 0x39E395FF, 0xB6ECCFFF, 0x257354FF,
            0x40DEBEFF, 0x3CF7D1FF, 0x2DA89BFF, 0x20625BFF, 0x67AEA6FF, 0x36E8F4FF, 0x36BAC9FF, 0x60C9E6FF,
            0x28CAF1FF, 0x236A86FF, 0x289CC1FF, 0x1B4454FF, 0x2580BCFF, 0x29A5F2FF, 0x7FAAE6FF, 0x2B559EFF,
            0x2F66DBFF, 0x1F43B4FF, 0x1921E8FF, 0x131A75FF, 0x6378DAFF, 0x3D25EAFF, 0x7E86E2FF, 0x664FE4FF,
            0x5A22EAFF, 0x544B97FF, 0x4A21B0FF, 0xAFA1DAFF, 0x4D4569FF, 0x8178A3FF, 0x7322EAFF, 0x1C0A34FF,
            0x6851A7FF, 0x746693FF, 0xC3B0E7FF, 0x8F57DDFF, 0x42375FFF, 0x9D5AEAFF, 0x881EECFF, 0x6E2EA4FF,
            0xA174D6FF, 0x481273FF, 0x7924BAFF, 0x9825E7FF, 0x2C133FFF, 0xA61CEDFF, 0xBF81E0FF, 0xB15CEEFF,
            0x8B20BDFF, 0x4E2259FF, 0x5D1770FF, 0xB92DECFF, 0xB01DE4FF, 0x9D5EAEFF, 0xCA23EAFF, 0xA32FB5FF,
            0x894794FF, 0xE38EEBFF, 0xDB20E9FF, 0xC14CCDFF, 0x951C95FF, 0xF12BF6FF, 0xEF63E5FF, 0xC324B6FF,
            0x6D4767FF, 0xF027D1FF, 0x461234FF, 0xDF58A8FF, 0xB82480FF, 0xEB26A4FF, 0xAA5280FF, 0x811C56FF,
            0x974B5EFF, 0xE45377FF, 0xD9788CFF, 0x3F0C10FF, 0xEA2144FF, 0xAE1D20FF, 0xF49892FF, 0x80403DFF,
            0xEA211AFF, 0xE16457FF, 0x731B11FF, 0xF17B67FF, 0xF24727FF, 0xBE3B26FF, 0xC58374FF, 0x833619FF,
            0xF15B25FF, 0x93523DFF, 0xD8744AFF, 0xF68D62FF, 0xFA682FFF, 0x3B1C0CFF, 0xA84D19FF, 0x452515FF,
            0x90654DFF, 0xFE7831FF, 0xCA6525FF, 0xEB7124FF, 0x99745FFF, 0xFD7F1CFF, 0xAF672EFF, 0x623819FF,
            0xE47815FF, 0xA75E15FF, 0xE0985CFF, 0xD8802BFF, 0xF19222FF, 0x6A4715FF, 0xCF8E40FF, 0xBA7924FF,
            0xE4A253FF, 0xEF9D25FF, 0xA0711EFF, 0xB3862EFF, 0xDAB161FF, 0x9E8253FF, 0xD9C590FF, 0xE9B42AFF,
    };

    public static final int[] CORN4 = {
            0x00000000, 0x000000FF, 0xFFFFFFFF, 0x858585FF, 0x434343FF, 0xCECECEFF, 0x242424FF, 0xA8A8A8FF,
            0x636363FF, 0xF5F5F4FF, 0x141414FF, 0x969696FF, 0x535353FF, 0xE2E2E2FF, 0x343434FF, 0xBBBBBBFF,
            0x747474FF, 0x4616A3FF, 0x7C5AF2FF, 0x5A33C2FF, 0xE16E00FF, 0xC850A0FF, 0x9A2C78FF, 0xE467B9FF,
            0xB74391FF, 0x598329FF, 0x94C563FF, 0x385C00FF, 0x6E9B3EFF, 0xACE07AFF, 0x4C741AFF, 0x5B7CB8FF,
            0x081D47FF, 0x96BCFFFF, 0x3A588EFF, 0x7194D3FF, 0x1B3463FF, 0xFFAE9EFF, 0x8D4C41FF, 0xD38678FF,
            0x632A22FF, 0xA86155FF, 0xEF9D8FFF, 0x9637BEFF, 0x6C008FFF, 0xB04EDBFF, 0x76D6BCFF, 0x076C58FF,
            0x4FAB93FF, 0x8DF0D5FF, 0x29836EFF, 0x66C5ACFF, 0xFA2B87FF, 0x001783FF, 0x295AD4FF, 0x0932A2FF,
            0x3C72F2FF, 0xC89B0EFF, 0xE2B331FF, 0xC996C9FF, 0x603960FF, 0x9F71A0FF, 0x371739FF, 0xE4AFE4FF,
            0x784E78FF, 0x00BF48FF, 0x2AD95DFF, 0x952FFFFF, 0x8617F4FF, 0xF15342FF, 0xC02B20FF, 0xDE4435FF,
            0x00B9E3FF, 0x29D3FFFF, 0xF545D3FF, 0xC312A7FF, 0x0024EBFF, 0xF7F6C5FF, 0x8B8960FF, 0x2D2B0CFF,
            0xCBC99CFF, 0x66643FFF, 0xA3A176FF, 0x5740A2FF, 0x917BEBFF, 0x351A72FF, 0x6C56BCFF, 0x4A328FFF,
            0x6F0937FF, 0xB9496FFF, 0x8B244BFF, 0xD65F86FF, 0xB2E03BFF, 0x8BB400FF, 0xCBFA55FF, 0xA2CE27FF,
            0xC211F0FF, 0x1B3948FF, 0xB1DBF3FF, 0x507386FF, 0x8AB2C7FF, 0x2E4E5FFF, 0x658A9EFF, 0x3400B4FF,
            0x442BD5FF, 0xF4A061FF, 0xC7793EFF, 0x9C551AFF, 0xE39154FF, 0xB158B7FF, 0xF895FFFF, 0x85348CFF,
            0xCA6ED1FF, 0x5B0C62FF, 0x9F4AA6FF, 0x6CC781FF, 0x005E28FF, 0x489D5DFF, 0x84E198FF, 0x23763CFF,
            0x5EB773FF, 0xE91C55FF, 0x3A7CCFFF, 0x1655A1FF, 0x4F93EAFF, 0x2D6DBDFF, 0x7A5158FF, 0xBB8B93FF,
            0x512F35FF, 0xFFCCD4FF, 0x91666DFF, 0x280E14FF, 0x58F631FF, 0x2BC900FF, 0x8037D2FF, 0x5B00A2FF,
            0x984FF0FF, 0x7227C0FF, 0x51F4F2FF, 0x18C8C7FF, 0xE23E9EFF, 0xB20E77FF, 0xFF57B7FF, 0xEBE583FF,
            0x817B22FF, 0xC0BB5DFF, 0xFFFE99FF, 0x989339FF, 0xDAD574FF, 0xAA9AE2FF, 0x493B71FF, 0x8374B5FF,
            0x271846FF, 0xC2B2FCFF, 0x5E508BFF, 0xD96160FF, 0xA93C3EFF, 0xF57775FF, 0x7B171FFF, 0xC65252FF,
            0xDF49E9FF, 0xB11DBCFF, 0xFC62FFFF, 0xCD3AD8FF, 0x6A8E7BFF, 0x112D20FF, 0xA6D0B9FF, 0x466856FF,
            0x7FA591FF, 0x264435FF, 0x737CFFFF, 0x251484FF, 0x5356D3FF, 0x3530A3FF, 0x676DF0FF, 0xE79000FF,
            0xFFA928FF, 0xA15084FF, 0xE88BC5FF, 0x762E5EFF, 0xBB669DFF, 0x4A0939FF, 0xFFA3E0FF, 0x2E7700FF,
            0x67B842FF, 0xA5FF7FFF, 0x428E1AFF, 0x7ED359FF, 0xAF1DFFFF, 0x2C739BFF, 0x66B2E0FF, 0x004E72FF,
            0x428AB5FF, 0x7ECCFCFF, 0x1E658BFF, 0x2F1EE9FF, 0xD6A982FF, 0x6A4728FF, 0xAB815DFF, 0x432606FF,
            0xF0C198FF, 0x835D3CFF, 0x7138A1FF, 0xB173EAFF, 0x4A1072FF, 0x894EBCFF, 0xCB8BFFFF, 0x27CB9EFF,
            0x46E5B6FF, 0x00BA8EFF, 0xD2356CFF, 0xF04D83FF, 0x0092FFFF, 0xE1D632FF, 0xFCF14FFF, 0x9D90ABFF,
            0x3D3447FF, 0xE0D2F0FF, 0x776C84FF, 0x18111FFF, 0xB6A9C5FF, 0x7035E3FF, 0x854EFFFF, 0x6223CFFF,
            0xC95221FF, 0xE66938FF, 0xB74510FF, 0xCF47B5FF, 0xA01E8BFF, 0xEC5ED0FF, 0xC4EDA5FF, 0x608045FF,
            0x9BC07DFF, 0x3E5B25FF, 0x76985AFF, 0x1E3600FF, 0x323B84FF, 0x6676CDFF, 0x151454FF, 0x44509FFF,
            0x7B8EE9FF, 0x262D72FF, 0x4D1021FF, 0x934856FF, 0xDA8190FF, 0x672534FF, 0xAE5D6BFF, 0xF799A8FF,
            0x7ED400FF, 0x95EF24FF, 0xC951FCFF, 0x9D26CCFF, 0xB741E9FF, 0x79D2D3FF, 0x146A6BFF, 0x54A9AAFF,
    };


    /*
     * Generated with a Halton sequence through Oklab color space, with increased gray coverage but fewer total colors,
     * to make room for special markers.
     */
/*    public static final int[] HALTONITE240 = new int[]{
            0x00000000, 0x000000FF, 0x141414FF, 0x282828FF, 0x291710FF, 0x1E222AFF, 0x3B3B3BFF, 0x434531FF,
            0x4F4F4FFF, 0x5C5C5CFF, 0x6A6A6AFF, 0x56626FFF, 0x787878FF, 0x878787FF, 0x999999FF, 0xAAAAAAFF,
            0xBBBBBBFF, 0xC2BBA9FF, 0xCCCCCCFF, 0xDDDDDDFF, 0xEEEEEEFF, 0xFFFFFFFF, 0xE31515FF, 0x5B0606FF,
            0xF23C37FF, 0xDA938FFF, 0xB41808FF, 0xFE1D02FF, 0xFFBBB2FF, 0x3F1C16FF, 0xF4A293FF, 0xC0422AFF,
            0x5B2E24FF, 0xB46B58FF, 0xF2825BFF, 0xC2836DFF, 0xA7593AFF, 0xE06635FF, 0xD35521FF, 0x793210FF,
            0xA44210FF, 0xCF794CFF, 0xFF9A60FF, 0xF8B891FF, 0x7E5030FF, 0xAE9784FF, 0x86694EFF, 0x502B06FF,
            0xEA7B0BFF, 0xEDD4B9FF, 0xDFAC73FF, 0x794811FF, 0xBB7213FF, 0x7B603CFF, 0xDFA24BFF, 0xE3971BFF,
            0xFFC24FFF, 0xF2CF80FF, 0x906D1DFF, 0xB0871FFF, 0xFDE5A7FF, 0xEDB71AFF, 0xA19150FF, 0xEDE389FF,
            0xF4E54FFF, 0x83804EFF, 0xBEBB4EFF, 0xE6E21DFF, 0xA4A222FF, 0xABAC7CFF, 0xF5FE22FF, 0xA5A94CFF,
            0xF6FF95FF, 0xBFD22EFF, 0xECFE65FF, 0xF2FAC2FF, 0x9BBD25FF, 0xB7C87DFF, 0xC1E367FF, 0x7A9633FF,
            0xB8FA35FF, 0x8FD111FF, 0x64852CFF, 0x223308FF, 0x496B1CFF, 0x88ED12FF, 0x42582CFF, 0x264509FF,
            0x397E0EFF, 0xB1FB85FF, 0xC5F8ABFF, 0x3DBB14FF, 0x68915EFF, 0xA0DE92FF, 0x47723EFF, 0x6AEF59FF,
            0x71FE60FF, 0x11560BFF, 0x78AE77FF, 0x1E9922FF, 0x1FA92AFF, 0x61C56DFF, 0x16D72EFF, 0x0AE930FF,
            0x48A75CFF, 0x3EDB6AFF, 0x24BC57FF, 0x71CB92FF, 0x4FF990FF, 0x35E986FF, 0x169355FF, 0x9BE8C3FF,
            0x9EFFD1FF, 0x68B69CFF, 0x10EBAFFF, 0x549787FF, 0x14D7ADFF, 0x1FAE9AFF, 0x117F76FF, 0x4DF7ECFF,
            0xB1FEFAFF, 0x124D4AFF, 0x69D4D3FF, 0x25E5F4FF, 0x75BFC7FF, 0x2DB2CEFF, 0x1B90B4FF, 0x1C5C7DFF,
            0x469AC6FF, 0x244E65FF, 0xAADAF7FF, 0x1E9CFBFF, 0x3D79ADFF, 0x8899AAFF, 0x83A3C3FF, 0x76B6F8FF,
            0x5AA7FEFF, 0x406697FF, 0x4282E6FF, 0x2C69D4FF, 0x1662FCFF, 0x184BB9FF, 0x1F439BFF, 0x081236FF,
            0xB2C1FAFF, 0x031050FF, 0x1127ABFF, 0x7C82C2FF, 0x090B23FF, 0x8E94E8FF, 0x3538F9FF, 0x4F50C5FF,
            0x7B7CFCFF, 0x2424EDFF, 0x1D16D5FF, 0x3B3962FF, 0x201693FF, 0x6D63C8FF, 0x3E3486FF, 0xB6B1D2FF,
            0x2E1E6EFF, 0x7E64E4FF, 0x7147FEFF, 0xB39CF5FF, 0x4413BFFF, 0x4F15DAFF, 0x260E5DFF, 0x5D3BAAFF,
            0x6625E1FF, 0x5A4382FF, 0x7A42DBFF, 0x480C8BFF, 0xAC6BF1FF, 0x8C6BA9FF, 0x680AA7FF, 0x8420C6FF,
            0xAC29F6FF, 0xB380C7FF, 0x650C83FF, 0x55096CFF, 0x875695FF, 0xCA4EECFF, 0xE994FDFF, 0x7E3E8CFF,
            0xD086E0FF, 0x9D36B1FF, 0xB53FC6FF, 0xD769E6FF, 0x7B1A88FF, 0xD308EDFF, 0x9604A4FF, 0x500153FF,
            0xFBBAFAFF, 0xA284A1FF, 0xB767B3FF, 0xFE43F2FF, 0xC221B4FF, 0xB00D9FFF, 0x32042DFF, 0xF925DFFF,
            0xFC73E9FF, 0xE90FCAFF, 0xD44ABEFF, 0xE25EC4FF, 0xF8ACE4FF, 0xA31479FF, 0xAB5692FF, 0xE31BA2FF,
            0x9D3F7CFF, 0x8C135FFF, 0x6B3858FF, 0x4B0932FF, 0xF372C1FF, 0xCC0E7EFF, 0x71174CFF, 0xF645A3FF,
            0xC03E83FF, 0xD55193FF, 0xF095C2FF, 0x893A5FFF, 0xAB134FFF, 0xE83175FF, 0xF93E83FF, 0xB46D86FF,
            0xA05B73FF, 0xE71A58FF, 0x22040DFF, 0xD27E96FF, 0xBC3E61FF, 0xD51144FF, 0xFE7B9AFF, 0xFE6885FF,
            0xDF6A7FFF, 0x8C525CFF, 0xA83F4BFF, 0x76121CFF, 0xD34B57FF, 0xC21A26FF, 0x87353AFF, 0x981C20FF,
            0xEA5A5EFF,
          //            0x48384840, 0x50405040, 0x58485840, 0x60506040, 0x68586840, 0x70607040, 0x78687840,
          //0x80708040, 0x88788840, 0x90809040, 0x98889840, 0xA070A040, 0xA860A840, 0xB050B040, 0xB840B840,
    };
    */
}
