package isonomicon;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ByteArray;
import com.badlogic.gdx.utils.IntIntMap;
import com.badlogic.gdx.utils.NumberUtils;
import squidpony.squidmath.BlueNoise;
import squidpony.squidmath.IRNG;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

import static squidpony.squidmath.NumberTools.acos_;

/**
 * Data that can be used to limit the colors present in a Pixmap or other image, here with the goal of using 256 or less
 * colors in the image (for saving indexed-mode images).
 * <p>
 * Created by Tommy Ettinger on 6/23/2018.
 */
public class PaletteReducer {

    public interface ColorMetric{
        double difference(final int color1, int color2);
        double difference(final int color1, int r2, int g2, int b2);
        double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2);
    }
    public static class BasicColorMetric implements ColorMetric{
        /**
         * Color difference metric; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param color1 an RGBA8888 color as an int
         * @param color2 an RGBA8888 color as an int
         * @return the difference between the given colors, as a positive double
         */
        public double difference(final int color1, final int color2) {
            // if one color is transparent and the other isn't, then this is max-different
            if(((color1 ^ color2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
            final int r1 = (color1 >>> 24), g1 = (color1 >>> 16 & 0xFF), b1 = (color1 >>> 8 & 0xFF),
                r2 = (color2 >>> 24), g2 = (color2 >>> 16 & 0xFF), b2 = (color2 >>> 8 & 0xFF),
                rmean = r1 + r2,
                r = r1 - r2,
                g = g1 - g2,
                b = b1 - b2,
                y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
            return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
        }
        /**
         * Color difference metric; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param color1 an RGBA8888 color as an int
         * @param r2     red value from 0 to 255, inclusive
         * @param g2     green value from 0 to 255, inclusive
         * @param b2     blue value from 0 to 255, inclusive
         * @return the difference between the given colors, as a positive double
         */
        public double difference(final int color1, int r2, int g2, int b2) {
            if((color1 & 0x80) == 0) return Double.POSITIVE_INFINITY; // if a transparent color is being compared, it is always different
            final int
                r1 = (color1 >>> 24),
                g1 = (color1 >>> 16 & 0xFF),
                b1 = (color1 >>> 8 & 0xFF),
                rmean = (r1 + r2),
                r = r1 - r2,
                g = g1 - g2,
                b = b1 - b2,
                y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
            return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
        }
        /**
         * Color difference metric; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param r1 red value from 0 to 255, inclusive
         * @param g1 green value from 0 to 255, inclusive
         * @param b1 blue value from 0 to 255, inclusive
         * @param r2 red value from 0 to 255, inclusive
         * @param g2 green value from 0 to 255, inclusive
         * @param b2 blue value from 0 to 255, inclusive
         * @return the difference between the given colors, as a positive double
         */
        public double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
            final int rmean = (r1 + r2),
                r = r1 - r2,
                g = g1 - g2 << 1,
                b = b1 - b2,
                y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
            return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
        }
    }

    public static class LABEuclideanColorMetric implements ColorMetric {
        /**
         * Color difference metric (squared) using L*A*B color space; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param rgba1 an RGBA8888 color as an int
         * @param rgba2 an RGBA8888 color as an int
         * @return the difference between the given colors, as a positive double
         */
        @Override
        public double difference(final int rgba1, final int rgba2)
        {
            if(((rgba1 ^ rgba2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            double L = (116.0 * y) - 16.0;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = (rgba2 >>> 24) / 255.0;
            g = (rgba2 >>> 16 & 0xFF) / 255.0;
            b = (rgba2 >>> 8 & 0xFF) / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            L -= 116.0 * y - 16.0;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

//            return L * L * 400.0 + A * A * 25.0 + B * B * 10.0;
            return (L * L * 11.0 + A * A * 1.6 + B * B);
        }
        @Override
        public double difference(final int rgba1, final int r2, final int g2, final int b2)
        {
            if((rgba1 & 0x80) == 0) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            double L = (116.0 * y) - 16.0;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            L -= 116.0 * y - 16.0;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

//            return L * L * 190.0 + A * A * 25.0 + B * B * 10.0;
            return (L * L * 11.0 + A * A * 1.6 + B * B);
        }
        @Override
        public double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
            double x, y, z, r, g, b;

            r = r1 / 255.0;
            g = g1 / 255.0;
            b = b1 / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            double L = (116.0 * y) - 16.0;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            L -= 116.0 * y - 16.0;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            //return L * L * 190 + A * A * 25 + B * B * 10;
//            return L * L * 190.0 + A * A * 25.0 + B * B * 10.0;
            return (L * L * 11.0 + A * A * 1.6 + B * B);
        }

    }

    public static class LABRoughColorMetric implements ColorMetric {
        /**
         * Color difference metric (squared) using L*A*B color space; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param rgba1 an RGBA8888 color as an int
         * @param rgba2 an RGBA8888 color as an int
         * @return the difference between the given colors, as a positive double
         */
        @Override
        public double difference(final int rgba1, final int rgba2)
        {
            if(((rgba1 ^ rgba2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.pow(x, 0.3125);
            y = Math.pow(y, 0.3125);
            z = Math.pow(z, 0.3125);

            double L = 100.0 * y;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = (rgba2 >>> 24) / 255.0;
            g = (rgba2 >>> 16 & 0xFF) / 255.0;
            b = (rgba2 >>> 8 & 0xFF) / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.pow(x, 0.3125);
            y = Math.pow(y, 0.3125);
            z = Math.pow(z, 0.3125);

            L -= 100.0 * y;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * Math.abs(L) * 350 + A * A * 25.0 + B * B * 15.0;
        }
        @Override
        public double difference(final int rgba1, final int r2, final int g2, final int b2)
        {
            if((rgba1 & 0x80) == 0) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.pow(x, 0.3125);
            y = Math.pow(y, 0.3125);
            z = Math.pow(z, 0.3125);

            double L = 100 * y;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.pow(x, 0.3125);
            y = Math.pow(y, 0.3125);
            z = Math.pow(z, 0.3125);

            L -= 100.0 * y;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * Math.abs(L) * 350 + A * A * 25.0 + B * B * 15.0;
        }
        @Override
        public double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
            double x, y, z, r, g, b;

            r = r1 / 255.0;
            g = g1 / 255.0;
            b = b1 / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.pow(x, 0.3125);
            y = Math.pow(y, 0.3125);
            z = Math.pow(z, 0.3125);

            double L = 100 * y;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.pow(x, 0.3125);
            y = Math.pow(y, 0.3125);
            z = Math.pow(z, 0.3125);

            L -= 100.0 * y;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * Math.abs(L) * 350 + A * A * 25.0 + B * B * 15.0;
        }

    }


    public static class ExperimentalMetric implements ColorMetric {
        public static final double[] yLUT = new double[2041], cLUT = new double[511];
        static {
            for (int i = 1; i < 2041; i++) {
                yLUT[i] = Math.cbrt(i / 2041.0);
            }
            for (int i = 1; i < 256; i++) {
                cLUT[255 - i] = -(cLUT[255 + i] = i * 0x1p-8);//Math.pow(i / 257.0, 0.75));
            }
        }
        @Override
        public double difference(int color1, int color2) {
            return difference(color1 >>> 24, color1 >>> 16 & 0xFF, color1 >>> 8 & 0xFF, color2 >>> 24, color2 >>> 16 & 0xFF, color2 >>> 8 & 0xFF);
        }

        @Override
        public double difference(int color1, int r2, int g2, int b2) {
            return difference(color1 >>> 24, color1 >>> 16 & 0xFF, color1 >>> 8 & 0xFF, r2, g2, b2);
        }

        @Override
        public double difference(int r1, int g1, int b1, int r2, int g2, int b2) {
            final double y = yLUT[r1 * 3 + g1 * 4 + b1] - yLUT[r2 * 3 + g2 * 4 + b2];
            final double cw = (cLUT[255 + r1 - b1] - cLUT[255 + r2 - b2]);
            final double cm = (cLUT[255 + g1 - b1] - cLUT[255 + g2 - b2]) * (cw * 1.25 + 2.0) * (cw * 1.25 + 2.0);
            return y * y * 20.0 + cw * cw + cm * cm;
        }
    }

    public static final BasicColorMetric basicMetric = new BasicColorMetric(); // has no state, should be fine static
    public static final LABEuclideanColorMetric labMetric = new LABEuclideanColorMetric();
    public static final LABRoughColorMetric labRoughMetric = new LABRoughColorMetric();
    public static final ExperimentalMetric experimentalMetric = new ExperimentalMetric();
    public byte[] paletteMapping;
    public final int[] paletteArray = new int[256];
    ByteArray curErrorRedBytes, nextErrorRedBytes, curErrorGreenBytes, nextErrorGreenBytes, curErrorBlueBytes, nextErrorBlueBytes;
    float ditherStrength = 0.5f, halfDitherStrength = 0.25f;

    /**
     * This stores a preload code for a PaletteReducer using {@link Coloring#ZIGGURAT64} with {@link #labMetric}. Using
     * a preload code in the constructor {@link #PaletteReducer(int[], byte[])} eliminates the time needed to fill 32 KB
     * of palette mapping in a somewhat-intricate way that only gets more intricate with better metrics, and replaces it
     * with a straightforward load from a String into a 32KB byte array.
     */
    public static final byte[] ENCODED_ZIGGURAT =
b\b\b\b\006\017\017444444443111111111\005\005\005\005\005\005\005\b\b\b\b\b\017\017\017\0174443333111111111\005\005\005\005\005\005\005\b\b\b\b\b\b\017\017\017\017333331111111111\016\016\016\016\016\016\016\016\b\b\b\b\b\b\017\017\017333331111111111\016\016\016\016\016\016\016\016\016\016\016\016\021////333311111111111**\016\016\016\016\016\016\016\016\016\016\021\021//////311111111111************\021\021\021///////1111111111**************\021\021//////5551111111)))))**********\021\021///000000522222)))))))))))))***,,,0000000022222))))))))))))))),,,,,,00000022222))))))))))))))),,,,,,,,000002222''''''''''))))),,,,,,,,,,0002222'''''''''''''''+++,,,,,,,,,,2222''''''''''''''''+++++++++,,,,222'''''''''''''''''++++++++++....2''''''''''''''''''+++...........'''''''''''''''''''.............''''''''''''''''''(.............'''''''''(((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((.......-(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------\001\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\003444444444111111\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\006\003\003\003\003\003\003\00344444444441111111\001\001\001\001\001\006\006\006\006\006\003\003\003\003\00344444444441111111\005\005\005\005\006\006\006\006\006\006\006\003\003\003444444444411111111\005\005\005\005\005\005\002\006\006\006\006\006\0064444444444411111111\005\005\005\005\005\005\005\b\b\b\b\017\017\017444444433111111111\005\005\005\005\005\005\005\b\b\b\b\b\017\017\017\0174443333111111111\005\005\005\005\005\005\005\b\b\b\b\b\b\017\017\017\017333331111111111\n\n\016\016\016\016\016\016\b\b\b\b\b\017\017\017\017333331111111111\016\016\016\016\016\016\016\016\016\016\016\016\021////333311111111111**\016\016\016\016\016\016\016\016\016\016\021\021//////311111111111***********\016\021\021\021///////1111111111**************\021\021//////5551111111)))))**********\021\021///000000522222)))))))))))))**,,,,0000000022222))))))))))))))),,,,,,00000022222))))))))))))))),,,,,,,,000002222''''''''''))))),,,,,,,,,,0002222'''''''''''''''+++,,,,,,,,,,2222''''''''''''''''+++++++++,,,,222'''''''''''''''''++++++++++....2''''''''''''''''''+++...........'''''''''''''''''''.............''''''''''''''''''(.............''''''''((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((.......-(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------((((((((((((((((((((((((--------\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\006\003\003\003\003\003\003\00344444444441111111\001\001\001\001\006\006\006\006\006\003\003\003\003\003\00344444444441111111\005\005\005\005\006\006\006\006\006\006\006\003\003\003444444444411111111\005\005\005\005\005\005\002\006\006\006\006\006\0064444444444111111111\005\005\005\005\005\005\005\b\b\b\b\017\017\017444444433111111111\005\005\005\005\005\005\005\b\b\b\b\b\017\017\017\0174443333111111111\005\005\005\005\005\005\b\b\b\b\b\b\b\017\017\0173333331111111111\n\n\n\n\016\016\016\016\b\b\b\b\b\017\017\017\017333331111111111\016\016\016\016\016\016\016\016\016\016\016\016\013////333311111111111*\016\016\016\016\016\016\016\016\016\016\016\021\021//////311111111111***********\016\021\021\021//////51111111111*************\021\021\021//////5551111111)))))**********\021\021///000000522222)))))))))))))**,,,,0000000022222))))))))))))))),,,,,,00000022222))))))))))))))),,,,,,,,000002222''''''''''))))),,,,,,,,,,0002222'''''''''''''''+++,,,,,,,,,,2222''''''''''''''''+++++++++,,,,222'''''''''''''''''++++++++++....2''''''''''''''''''+++...........'''''''''''''''''''.............'''''''''''''''''((.............''''''''((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((.......-(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------((((((((((((((((((((((((--------\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\001\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\003\003\003\003\003\003\003\003\0034444444441111111\001\001\001\001\001\001\006\003\003\003\003\003\003\003\00344444444441111111\001\001\001\001\006\006\006\006\006\003\003\003\003\003444444444441111111\005\005\005\002\006\006\006\006\006\006\006\003\003\003444444444411111111\005\005\005\005\005\002\002\002\006\006\006\006\0064444444444111111111\005\005\005\005\005\005\005\b\b\b\b\017\017\017444444433111111111\005\005\005\005\005\005\005\b\b\b\b\b\017\017\01744433333111111111\005\005\005\005\005\005\b\b\b\b\b\b\017\017\017\0173333331111111111\n\n\n\n\n\n\n\n\b\b\b\b\b\017\017\0173333331111111111\016\016\016\016\016\016\016\016\016\016\016\016\013////333311111111111\016\016\016\016\016\016\016\016\016\016\016\016\021\021//////311111111111***********\016\021\021\021//////51111111111*************\021\021\021//////5551111111))))))*********\021\021///000005522222))))))))))))))*,,,,0000000022222))))))))))))))),,,,,,00000022222))))))))))))))),,,,,,,,000002222''''''''''))))),,,,,,,,,,0002222'''''''''''''''+++,,,,,,,,,,2222''''''''''''''''+++++++++,,,,222'''''''''''''''''++++++++++....2''''''''''''''''''+++...........'''''''''''''''''''.............'''''''''''''''''((.............''''''''((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((.......-(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------((((((((((((((((((((((((--------\001\001\001\001\001\001\001\003\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\001\003\003\003\003\003\003\003\003\0034444444441111111\001\001\001\001\001\001\003\003\003\003\003\003\003\003\00344444444441111111\001\001\001\001\001\004\003\003\003\003\003\003\003\003\00344444444441111111\001\001\004\006\006\006\006\006\003\003\003\003\003\003444444444411111111\005\005\005\002\002\006\006\006\006\006\003\003\0034444444444411111111\005\005\005\005\005\002\002\002\006\006\006\00644444444444111111111\005\005\005\005\005\005\005\b\b\b\b\017\017\017444444433111111111\005\005\005\005\005\005\005\b\b\b\b\017\017\017\01744433333111111111\n\n\n\n\005\005\b\b\b\b\b\b\017\017\017\0173333331111111111\n\n\n\n\n\n\n\n\b\b\b\b\b\017\017\0173333331111111111\016\016\016\016\016\016\016\016\016\016\016\016\013////333311111111111\016\016\016\016\016\016\016\016\016\016\016\016\021\021//////111111111111***********\016\021\021\021//////51111111111*************\021\021\021//////5551111111))))))*********\021////000005522222))))))))))))))*,,,,0000000022222))))))))))))))),,,,,,00000022222%)))))))))))))),,,,,,,,000022222''''''''''))))),,,,,,,,,,0002222'''''''''''''''++++,,,,,,,,02222''''''''''''''''++++++++++,,,222'''''''''''''''''++++++++++....2''''''''''''''''''+++...........'''''''''''''''''''.............'''''''''''''''''((.............'''''''(((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((......--(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------((((((((((((((((((((((((--------\001\001\001\001\001\001\003\003\003\003\003\003\003\003\003\0034444444444111111\001\001\001\001\001\001\003\003\003\003\003\003\003\003\00344444444441111111\001\001\001\001\001\003\003\003\003\003\003\003\003\003\00344444444441111111\001\001\001\004\004\004\003\003\003\003\003\003\003\003444444444441111111\004\004\004\004\004\004\006\003\003\003\003\003\003\003444444444411111111\005\005\002\002\002\006\006\006\006\003\003\003\0034444444444411111111\005\005\005\005\005\002\002\002\002\006\006\00344444444444111111111\005\005\005\005\005\005\005\b\b\b\017\017\017\017444444433111111111\005\005\005\005\005\005\b\b\b\b\b\017\017\017\01744433331111111111\n\n\n\n\n\n\n\b\b\b\b\b\017\017\017\0173333331111111111\n\n\n\n\n\n\n\n\n\b\b\b\b\017\017\0173333311111111111\016\016\016\016\016\016\016\016\016\016\016\013\013////333311111111111\016\016\016\016\016\016\016\016\016\016\016\016\021\021//////111111111111**********\016\016\021\021\021//////51111111111*************\021\021\021/////55551111111)))))))*******\021\021///0000005522222))))))))))))))),,,,0000000022222))))))))))))))),,,,,,00000022222%%%)))))))))))),,,,,,,,000022222'''''''''')))),,,,,,,,,,,0002222''''''''''''''+++++,,,,,,,,02222''''''''''''''''++++++++++,,,222'''''''''''''''''++++++++++....2''''''''''''''''''+++...........''''''''''''''''''..............'''''''''''''''''((.............'''''''(((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((......--(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------((((((((((((((((((((((((--------\001\001\001\001\001\003\003\003\003\003\003\003\003\003\00344444444441111111\001\001\001\004\004\003\003\003\003\003\003\003\003\003\00344444444441111111\001\004\004\004\004\003\003\003\003\003\003\003\003\003\00344444444441111111\004\004\004\004\004\004\003\003\003\003\003\003\003\003444444444441111111\004\004\004\004\004\004\004\003\003\003\003\003\0034444444444411111111\005\005\007\002\002\002\006\006\003\003\003\003\0034444444444111111111\005\005\005\005\002\002\002\002\002\006\003\01744444444443111111111\005\005\005\005\005\005\002\002\002\002\017\017\0174444444333111111111\005\005\005\005\005\005\b\b\b\b\b\017\017\017\01744333331111111111\n\n\n\n\n\n\n\b\b\b\b\017\017\017\017\0173333331111111111\n\n\n\n\n\n\n\n\n\b\b\b\017\017\017\0173333311111111111\016\016\016\016\016\016\016\016\016\016\016\013\013\013///333311111111111\016\016\016\016\016\016\016\016\016\016\016\016\021\021//////111111111111**********\016\016\021\021\021//////51111111111*************\021\021\021/////55551111111)))))))*******\021\021///0000005522222))))))))))))))),,,00000000022222))))))))))))))),,,,,,00000022222%%%%))))))))))),,,,,,,,000022222''''''''''%))),,,,,,,,,,,0002222''''''''''''''+++++,,,,,,,,02222''''''''''''''''++++++++++,,\025222'''''''''''''''''++++++++++...22''''''''''''''''''+++...........''''''''''''''''''..............''''''''''''''''(((.............''''''((((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((......--(((((((((((((((((((((((((-------(((((((((((((((((((((((((-------((((((((((((((((((((((((--------\004\004\004\004\003\003\003\003\003\003\003\003\003\003\00344444444441111111\004\004\004\004\004\003\003\003\003\003\003\003\003\003444444444441111111\004\004\004\004\004\003\003\003\003\003\003\003\003\003444444444441111111\004\004\004\004\004\004\003\003\003\003\003\003\003\003444444444411111111\007\007\004\004\004\004\003\003\003\003\003\003\0034444444444411111111\007\007\007\007\007\007\007\003\003\003\003\00344444444444111111111\005\005\005\005\002\002\002\002\002\002\017444444444443111111111\005\005\005\005\005\005\002\002\002\017\017\017\0174444444331111111111\n\n\n\n\n\005\b\b\b\b\017\017\017\017\01744333331111111111\n\n\n\n\n\n\n\n\b\b\b\017\017\017\017\0173333331111111111\n\n\n\n\n\n\n\n\n\n\013\013\013\017\017\0173333311111111111\016\016\016\016\016\016\016\016\016\016\013\013\013\013///333111111111111\016\016\016\016\016\016\016\016\016\016\016\021\021\021//////111111111111*********\016\016\021\021\021\021/////551111111111*************\021\021//////55551111111))))))))******\021\021///0000005522222))))))))))))))),,,00000000222222))))))))))))))),,,,,000000022222%%%%%%)))))))),,,,,,,,,000022222'''''''''%%%))&,,,,,,,,,,0022222''''''''''''''+++++,,,,,,,,02222'''''''''''''''++++++++++++,\025222'''''''''''''''''++++++++++...22''''''''''''''''''+++...........''''''''''''''''''..............''''''''''''''''(((.............'''''(((((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((.....---(((((((((((((((((((((((((-------((((((((((((((((((((((((--------((((((((((((((((((((((((--------\004\004\004\004\003\003\003\003\003\003\003\003\003\003444444444441111111\004\004\004\004\004\003\003\003\003\003\003\003\003\003444444444411111111\004\004\004\004\004\003\003\003\003\003\003\003\0034444444444411111111\004\004\004\004\004\004\003\003\003\003\003\003\0034444444444411111111\007\007\007\007\004\004\003\003\003\003\003\00344444444444111111111\007\007\007\007\007\007\007\007\003\003\003444444444444111111111\005\005\005\007\007\007\007\007\007\007\017444444444441111111111\005\005\005\005\005\005\002\002\002\017\017\017\0174444443331111111111\n\n\n\n\n\n\n\b\b\b\017\017\017\017444333331111111111\n\n\n\n\n\n\n\n\n\b\017\017\017\017\01733333311111111111\n\n\n\n\n\n\n\n\n\013\013\013\013\017\01733333311111111111\016\016\016\016\016\016\016\016\016\016\013\013\013\013//3333111111111111\016\016\016\016\016\016\016\016\016\016\016\021\021\021/////5111111111111*********\016\016\021\021\021\021/////555111111111************\021\021\021/////055551111111)))))))))*****\021\021//00000005222222))))))))))))))),,,00000000222222)))))))))))))),,,,,,000000022222%%%%%%%))))))),,,,,,,,,000022222'''''''%%%%%%&&,,,,,,,,,,0022222''''''''''''''++++++,,,,,,,22222'''''''''''''''++++++++++++\025\025222''''''''''''''''+++++++++++...22''''''''''''''''''+++...........''''''''''''''''''..............'''''''''''''''((((.............'''(((((((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((.....---(((((((((((((((((((((((((-------((((((((((((((((((((((((--------((((((((((((((((((((((((--------\004\004\004\004\004\003\003\003\003\003\003\003\0034444444444411111111\004\004\004\004\004\003\003\003\003\003\003\003\0034444444444411111111\004\004\004\004\004\003\003\003\003\003\003\003\0034444444444411111111\t\t\t\004\004\004\003\003\003\003\003\00344444444444411111111\t\t\t\t\t\t\t\003\003\003\003\00344444444444111111111\t\t\t\t\t\t\t\t\003\003\003444444444444111111111\t\t\t\t\t\t\t\t\t\017\017444444444431111111111\n\n\n\n\n\t\002\002\017\017\017\01744444443331111111111\n\n\n\n\n\n\n\n\r\r\017\017\017\017443333311111111111\n\n\n\n\n\n\n\n\n\r\f\f\017\017\01733333311111111111\n\n\n\n\n\n\n\n\n\013\013\013\013\f\f33333111111111111\016\016\016\016\016\016\016\016\016\013\013\013\013\013//3333111111111111\016\016\016\016\016\016\016\016\016\016\016\021\021\021/////5111111111111********\016\016\016\021\021\021/////5555111111111))**********\021\021\021/////555555111112))))))))))****\021\021/000000055222222)))))))))))))),,,,00000000222222%))))))))))))),,,,,,000000222222%%%%%%%%)))))),,,,,,,,0000022222'''''%%%%%%%%&&,,,,,,,,,,0022222'''''''''''''&&+++++,,,,,,,22222'''''''''''''''++++++++++++\025\025222''''''''''''''''+++++++++++...22'''''''''''''''''++++...........''''''''''''''''''..............'''''''''''''''((((.............((((((((((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((....----((((((((((((((((((((((((--------((((((((((((((((((((((((--------((((((((((((((((((((((((--------\004\004\004\004\004\003\003\003\003\003\003\003\0034444444444411111117\t\t\t\004\004\003\003\003\003\003\003\00344444444444411111117\t\t\t\t\004\003\003\003\003\003\003\00344444444444111111117\t\t\t\t\t\t\003\003\003\003\003444444444444111111117\t\t\t\t\t\t\t\t\003\003\003444444444444111111117\t\t\t\t\t\t\t\t\t\0034444444444441111111117\t\t\t\t\t\t\t\t\t\f4444444444331111111117\n\n\n\n\n\t\r\r\r\f\f\f44444433311111111117\n\n\n\n\n\n\n\r\r\r\f\f\f\f433333311111111111\n\n\n\n\n\n\n\n\n\r\r\f\f\f\f33333311111111111\n\n\n\n\n\n\n\n\013\013\013\013\013\f\f33333111111111111\016\016\016\016\016\016\016\016\013\013\013\013\013\013\013/3333111111111111\016\016\016\016\016\016\016\016\016\016\013\013\021\021////55511111111111*******\016\016\016\016\021\021\021/////5555111111111))))********\021\021\021////0555555111122)))))))))))**\021\021\023\023000000055222222)))))))))))))),,,000000000222222%%%%)))))))))),,,,,,000000222222%%%%%%%%%%)))),,,,,,,,0000222222%%%%%%%%%%%%&&&,,,,,,,,,00022222'''''''''''''&&++++++,,,,,\02522222'''''''''''''''+++++++++++\025\025\025222''''''''''''''''+++++++++++..\02522'''''''''''''''''++++...........''''''''''''''''''..............''''''''''''''(((((.............((((((((((((((((((((............((((((((((((((((((((((..........((((((((((((((((((((((((...-----((((((((((((((((((((((((--------((((((((((((((((((((((((--------((((((((((((((((((((((((--------\t\t\t\t\t\003\003\003\003\003\003\00344444444444111111177\t\t\t\t\t\t\003\003\003\003\003444444444444111111177\t\t\t\t\t\t\003\003\003\003\003444444444444111111177\t\t\t\t\t\t\t\003\003\003\003444444444444111111177\t\t\t\t\t\t\t\t\t\0034444444444441111111177\t\t\t\t\t\t\t\t\t\t4444444444431111111177\t\t\t\t\t\t\t\t\r\f\f444444444311111111177\n\n\n\n\n\r\r\r\r\f\f\f44444333311111111117\n\n\n\n\n\n\r\r\r\r\f\f\f\f433333311111111117\n\n\n\n\n\n\n\n\020\020\r\f\f\f\f33333111111111117\n\n\n\n\n\n\n\013\013\013\013\013\020\f\f33333111111111117\016\016\016\016\016\016\016\013\013\013\013\013\013\013\013/3331111111111117\016\016\016\016\016\016\016\016\016\013\013\013\013\021///555511111111117******\016\016\016\016\021\021\021\021////55555511111117)))))******\021\021\021\021///05555555112222))))))))))))\024\024\023\023\023000000055222222)))))))))))))),,\023000000002222222%%%%%%)))))))),,,,,,000000222222%%%%%%%%%%%))&,,,,,,,,0000222222%%%%%%%%%%%%&&&&,,,,,,,,00222222''''''''''''&&&++++++,,,,,\02522222'''''''''''''''+++++++++++\025\025\025222''''''''''''''''+++++++++++..\02522'''''''''''''''''++++...........''''''''''''''''''..............'''''''''''''((((((.............(((((((((((((((((((((...........((((((((((((((((((((((..........((((((((((((((((((((((((...-----((((((((((((((((((((((((--------((((((((((((((((((((((((--------((((((((((((((((((((((((--------\t\t\t\t\t\t\003\003\003\003\003444444444444111117777\t\t\t\t\t\t\t\003\003\003\003444444444444111117777\t\t\t\t\t\t\t\t\003\0034444444444441111111777\t\t\t\t\t\t\t\t\t\0034444444444441111111777\t\t\t\t\t\t\t\t\t94444444444441111111777\t\t\t\t\t\t\t\t>99444444444411111111777\t\t\t\t>>>>>>9994444443311111111777\n\n\n>>>\r\r\r\r\f\f99444333311111111777\n\n\n\n\n\020\r\r\r\r\r\f\f9933333111111111777\n\n\n\n\n\n\020\020\020\020\020\020\f\f\f33333111111111177\n\n\n\n\n\n\022\022\022\022\020\020\020\020\f88888111111111177\n\016\016\016\016\016\013\013\013\013\013\013\013\013\01388888111111111177\016\016\016\016\016\016\016\016\013\013\013\013\013\013///555511111111177*****\016\016\016\016\016\021\021\021\021///555555511111177)))))))\024\024\024\024\024\021\021\021\023\023\02355555555522222))))))))))\024\024\024\023\023\023\023\02300000552222222%)))))))))))\024\024\023\023\023\02300000002222222%%%%%%%%)))))),,,,,0000002222222%%%%%%%%%%%%&&&,,,,,,,0000222222%%%%%%%%%%%%&&&&,,,,,,,,00222222''''''''''''&&&+++++++,,\025\025\02522222''''''''''''''+++++++++++\025\025\025\025222''''''''''''''''+++++++++++.\025\02522'''''''''''''''''++++...........''''''''''''''''''..............''''''''''''(((((((.............(((((((((((((((((((((...........((((((((((((((((((((((..........((((((((((((((((((((((((..------((((((((((((((((((((((((--------((((((((((((((((((((((((--------((((((((((((((((((((((((--------\t\t\t\t\t\t\t\t\00399444444444441111177777\t\t\t\t\t\t\t\t\t99444444444441111177777\t\t\t\t\t\t\t\t999944444444441111177777\t\t\t\t\t\t\t\t999944444444441111177777\t\t\t\t\t>>>>99994444444411111177777>>>>>>>>>99999444444311111117777>>>>>>>>>>9999994433811111117777\033\033\033>>>>>>>9999999388111111117777\n\n\n\033\033\033\020\020\r\r\r\f99988888111111117777\n\n\n\n\n\022\020\020\020\020\020\020\f\f888888111111117777\n\n\n\n\022\022\022\022\022\022\022\022\020<888888111111117777     \022\022\013\013\013\013\013\022\022<88888111111117777        \013\013\013\013\013\013//5555551111117777\024\024\024\024\024\024\024\024\024\024\021\021\021\021//5555555511117777)))\024\024\024\024\024\024\024\024\024\023\023\023\023\023\02355555555222222))))))))\024\024\024\024\024\023\023\023\023\02300000552222222%%%%%))))))\024\024\024\023\023\023\02300000002222222%%%%%%%%%%)))\024,,,,,0000002222222%%%%%%%%%%%%&&&,,,,,,00002222222%%%%%%%%%%%%&&&&&,,,,,,,00222222'''''''''''&&&&++++++++\025\025\025\02522222''''''''''''''+++++++++++\025\025\025\025222'''''''''''''''++++++++++++\025\025\02522'''''''''''''''''++++...........'''''''''''''''''...............'''''''''''((((((((.............(((((((((((((((((((((...........((((((((((((((((((((((..........((((((((((((((((((((((((.-------((((((((((((((((((((((((--------((((((((((((((((((((((((--------(((((((((((((((((((((((---------\t\t\t\t\t\t>>999999444444441117777777\t\t\t\t>>>>999999944444411117777777\t\t>>>>>>999999944444411117777777>>>>>>>>>99999994444811117777777>>>>>>>>>99999999448811117777777>>>>>>>>>99999999988811111777777>>>>>>>>>>9999999888811111777777\033\033\033\033\033>>>>>9999998888811111777777\033\033\033\033\033\033\033\033\033\033>999988888811111777777\n\022\022\022\022\022\022\022\020\020\020<<<888888111111777777   \022\022\022\022\022\022\022\022\022<<<88888111111777777       \022\022\022\022\022\022\022<88888111111777777          \013\013\013\013/55555551111777777\024\024\024\024\024\024\024\024    \023\023\023\0235555555551777777\024\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\023\02355555555222222%)))\024\024\024\024\024\024\024\024\024\023\023\023\023\02300005552222222%%%%%%%)\024\024\024\024\024\024\023\023\023\02300000022222222%%%%%%%%%%%%\024\024,,,,,0000002222222%%%%%%%%%%%%&&&,,,,,,00002222222%%%%%%%%%%%&&&&&&,,,,,\025\025\0252222222'''''''''%%&&&&&++++++\025\025\025\025\02522222''''''''''''''++++++++++\025\025\025\025\025222'''''''''''''''+++++++++++\025\025\025\02522''''''''''''''''+++++..........\026'''''''''''''''''...............'''''''''((((((((((.............(((((((((((((((((((((...........((((((((((((((((((((((..........((((((((((((((((((((((((--------((((((((((((((((((((((((--------((((((((((((((((((((((((--------(((((((((((((((((((((((--------->>>>>>>>999999999994887777777777>>>>>>>>999999999998887777777777>>>>>>>>999999999998887777777777>>>>>>>>>99999999988811777777777>>>>>>>>>99999999988811777777777>>>>>>>>>99999999888811777777777\033\033\033>>>>>>>9999998888811777777777\033\033\033\033\033\033\033>>>>999988888811777777777\033\033\033\033\033\033\033\033\033\033\033<99888888811177777777\022\022\022\022\022\033\033\033\033\033<<<<888888811177777777     \022\022\022\022\022\022<<<<88888811177777777        \022\022\022\022\022<<88888811177777777            \031\031555555555177777777            \023\023\023\0235555555557777777\024\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\023555555552222222%%\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\02300055522222222%%%%%%%%\024\024\024\024\024\024\023\023\023\02300000022222222%%%%%%%%%%%\024\024\024\024,,\02300000022222222%%%%%%%%%%%&&&&&,,,,,00002222222%%%%%%%%%%%&&&&&&&,,\025\025\025\025\0252222222''''''%%%%%&&&&&+++++\025\025\025\025\025\02522222'''''''''''''&+++++++++\025\025\025\025\025\025222'''''''''''''''+++++++++++\025\025\025\02522''''''''''''''''+++++.........\026\026'''''''''''''''''..............\026'''''''((((((((((((.............(((((((((((((((((((((...........((((((((((((((((((((((.........-((((((((((((((((((((((((--------((((((((((((((((((((((((--------(((((((((((((((((((((((---------(((((((((((((((((((((((--------->>>>>>>>999999999998877777777777>>>>>>>>999999999988877777777777>>>>>>>>>99999999988877777777777>>>>>>>>>99999999988877777777777>>>>>>>>>99999999888877777777777\033\033>>>>>>>>9999998888877777777777\033\033\033\033\033\033>>>>9999998888877777777777\033\033\033\033\033\033\033\033\033\033>999988888877777777777\033\033\033\033\033\033\033\033\033\033<<<8888888877777777777  \033\033\033\033\033\033\033<<<<<888888877777777777      \022\022\022\022<<<<<88888877777777777         \031\031\031\031<<55555577777777777           \031\031\031\03155555555777777777             \023\023:5555555577777777\024\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\023:55555552222222%%\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\02300055522222222%%%%%%%\024\024\024\024\024\024\024\023\023\023\023\0230000222222222%%%%%%%%%%%&&&&\023\023\023\0230000022222222%%%%%%%%%%%&&&&&&,\025\025\025\025\025022222222%%%%%%%%%%%&&&&&&&\025\025\025\025\025\025\025\025222222%%%%%%%%%%%&&&&&++++\025\025\025\025\025\025\02522222''''''''''''&&&++++++++\025\025\025\025\025\025222''''''''''''''+++++++++++\025\025\025\025\02522''''''''''''''''+++++........\026\026\026'''''''''''''''((.............\026\026''''(((((((((((((((............\026(((((((((((((((((((((...........((((((((((((((((((((((........--((((((((((((((((((((((((--------(((((((((((((((((((((((---------(((((((((((((((((((((((---------\"\"(((((((((((((((((((((--------->>>>>>>>999999999988777777777777>>>>>>>>>99999999888777777777777>>>>>>>>>99999999888777777777777>>>>>>>>>99999999888777777777777\033\033\033>>>>>>99999998888777777777777\033\033\033\033\033>>>>>9999998888777777777777\033\033\033\033\033\033\033\033\033>9999988888777777777777\033\033\033\033\033\033\033\033\033\033<<99888888777777777777\033\033\033\033\033\033\033\033\033<<<<<888888777777777777    \033\033\033\033\033<<<<<888888777777777777       \031\031\031\031<<<<88888777777777777         \031\031\031\031\031<:5555777777777777           \031\031\031:::555557777777777             \031::::55555577777777\024\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023::::555522222222%\024\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\023\023::55222222222%%%%%%%\024\024\024\024\024\024\024\023\023\023\023\0230000222222222%%%%%%%%%%%&&&&\023\023\023\0230000222222222%%%%%%%%%%%&&&&&\025\025\025\025\025\025\025\02522222222%%%%%%%%%%&&&&&&&\025\025\025\025\025\025\025\025\025222222%%%%%%%%%%&&&&&&+++\025\025\025\025\025\025\025\02522222'''''''''#####&+++++++\025\025\025\025\025\025\025222''''''''''''###+++++++++\025\025\025\025\025\02522'''''''''''''''#+++++......\026\026\026\026\026''''''''''''''(((............\026\026\026(((((((((((((((((((...........\026\026(((((((((((((((((((((..........\026((((((((((((((((((((((......----(((((((((((((((((((((((---------(((((((((((((((((((((((---------(((((((((((((((((((((((---------\"\"\"\"\"\"\"((((((((((((((((--------->>>>>>>>>99999999887777777777777\033>>>>>>>>99999999887777777777777\033\033>>>>>>>99999998887777777777777\033\033\033\033>>>>>99999998887777777777777\033\033\033\033\033\033>>>99999988887777777777777\033\033\033\033\033\033\033\033>>9999988887777777777777\033\033\033\033\033\033\033\033\033\033<999888887777777777777\033\033\033\033\033\033\033\033\033<<<<8888887777777777777\033\033\033\033\033\033\033\033\033<<<<<888887777777777777    \031\031\031\031\031<<<<<888887777777777777      \031\031\031\031\031\031<<<88887777777777777        \031\031\031\031\031\031\031:::57777777777777          \031\031\031\031:::::5577777777777            \031?:::::::55777777777\024\024\024\024\024\024\024\024\024\024\024 ????::::::5522222222%\024\024\024\024\024\024\024\024\024\024\024\024\023\023\023\023\023:::::222222222%%%%%%%\024\024\024\024\024\024\023\023\023\023\023\0230002222222222%%%%%%%%%%&&&&&\025\025\025\025\025\02500222222222%%%%%%%%%%&&&&&&\025\025\025\025\025\025\025\02522222222%%%%%%%%%%&&&&&&&\025\025\025\025\025\025\025\025\025222222############&&&&&+\025\025\025\025\025\025\025\025\02522222###############++++++\025\025\025\025\025\025\025\025222''''''''########+++++++\025\025\025\025\025\025\02522''''''''''''#####++++....\026\026\026\026\026\026\026''''''''''''(((((..........\026\026\026\026\026(((((((((((((((((((.........\026\026\026\026(((((((((((((((((((((.........\026\026((((((((((((((((((((((.....-----(((((((((((((((((((((((---------(((((((((((((((((((((((---------\"\"\"\"\"((((((((((((((((((---------\"\"\"\"\"\"\"\"\"((((((((((((((---------\033\033\033\033>>>>>99999998877777777777777\033\033\033\033>>>>>99999998877777777777777\033\033\033\033\033\033>>>99999988877777777777777\033\033\033\033\033\033\033>>99999988877777777777777\033\033\033\033\033\033\033\033\033>9999888877777777777777\033\033\033\033\033\033\033\033\033<<999888877777777777777\033\033\033\033\033\033\033\033\033<<<<8888877777777777777\033\033\033\033\033\033\033\033\033<<<<8888877777777777777\030\030\030\030\030\030\030\033<<<<<<888877777777777777   \030\030\030\030\030\031\031\031<<<;88877777777777777     \030\030\030\030\031\031\031\031;;;;877777777777777        \030\030\031\031\031\031;::::7777777777777          \030\030\030\030:::::::77777777777           \030???::::::::777777777           ?????::::::::22222222%\024\024\024\024\024\024\024\024\024\024\024??????:::::222222222%%%%%%%\024\024\024\024\024\024???????::2222222222%%%%%%%%%%&&&&\025\025\025\025\025\025\025\025\025222222222%%%%%%%%%%&&&&&\025\025\025\025\025\025\025\025\02522222222%%%%%%%%%#&&&&&&\025\025\025\025\025\025\025\025\025\025222222#############&&&&\025\025\025\025\025\025\025\025\025\02522222################+++\025\025\025\025\025\025\025\025\025\025222#################+++++\025\025\025\025\025\025\026\026\0262'''''''###########+++.\026\026\026\026\026\026\026\026\026\026''''''''''(((((((#......\026\026\026\026\026\026\026\026(((((((((((((((((((.......\026\026\026\026\026\026(((((((((((((((((((((.......\026\026\026\026(((((((((((((((((((((((..-------(((((((((((((((((((((((---------\"\"\"\"(((((((((((((((((((---------\"\"\"\"\"\"\"\"((((((((((((((----------\"\"\"\"\"\"\"\"\"\"\"\"((((((((((----------\033\033\033\033\033\033\033>>99999988777777777777777\033\033\033\033\033\033\033\033>99999988777777777777777\033\033\033\033\033\033\033\033\03399999888777777777777777\033\033\033\033\033\033\033\033\033<9999888777777777777777\033\033\033\033\033\033\033\033\033<<998888777777777777777\033\033\033\033\033\033\033\033\033<<<<8888777777777777777\033\033\033\033\033\033\033\033<<<<<8888777777777777777\030\030\030\030\030\030\030\030<<<;;;888777777777777777\030\030\030\030\030\030\030\030\030\030;;;;;;8777777777777777\030\030\030\030\030\030\030\030\030\030\030;;;;;;777777777777777   \030\030\030\030\030\030\030\030\030;;;;;;77777777777777      \030\030\030\030\030\030\030;;;:::7777777777777        \030\030\030\030\030\030:::::::77777777777          \030????:::::::7777777777         ????????::::::222222266%\024\024\024\024\024\024\024\024\024\035????????::::222222222%%%%%%%\024\024\024\024\035\035\035\035\035????::2222222222%%%%%%%%%%&&&\035\025\025\025\025\025\025\025\025\025222222222%%%%%%%%%%&&&&\025\025\025\025\025\025\025\025\025\02522222222############&&&\025\025\025\025\025\025\025\025\025\025\025222222###############&\025\025\025\025\025\025\025\025\025\025\02522222#################+\025\025\025\025\025\025\025\025\025\025\025222#################!!!+\025\025\025\026\026\026\026\026\026\0262#################!!!\026\026\026\026\026\026\026\026\026\026\026\026'''''############!!!.\026\026\026\026\026\026\026\026\026\026\026(((((((((((((((((((....\026\026\026\026\026\026\026\026\026(((((((((((((((((((((....\026\026\026\026\026\026\026(((((((((((((((((((((((--------\027\"\"\"((((((((((((((((((((---------\"\"\"\"\"\"\"\"((((((((((((((----------\"\"\"\"\"\"\"\"\"\"\"(((((((((((----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"((((((((----------\033\033\033\033\033\033\033\033\033<9999887777777777777777\033\033\033\033\033\033\033\033\033<;999887777777777777777\033\033\033\033\033\033\033\033\033;;;98887777777777777777\033\033\033\033\033\033\033\033;;;;;8887777777777777777\033\033\033\033\033\033\033\033;;;;;;887777777777777777\030\030\030\030\030\030\033;;;;;;;;87777777777777777\030\030\030\030\030\030\030;;;;;;;;;7777777777777777\030\030\030\030\030\030\030\030;;;;;;;;7777777777777777\030\030\030\030\030\030\030\030\030;;;;;;;;777777777777777\030\030\030\030\030\030\030\030\030\030;;;;;;;777777777777777\030\030\030\030\030\030\030\030\030\030\030;;;;;;;77777777777777   \030\030\030\030\030\030\030\030\030\030;;;;;:7777777777777      \030\030\030\030\030\030\030\030;::::::77777777777        \030\030??????::::::7777777777        \035????????::::::666666666%\024\024\024\024\024\024\035\035\035\035\035\035\035?????::::666666666%%%%%%%\024\035\035\035\035\035\035\035\035\035\035\035\035\035:6266666666%%%%%%%%%&&\035\035\035\035\035\025\025\025\025\025\025\025222266666##########&&&\025\025\025\025\025\025\025\025\025\025\02522222666#############&\025\025\025\025\025\025\025\025\025\025\025\025222266################\025\025\025\025\025\025\025\025\025\025\02522226################!!\025\025\025\025\025\025\025\025\025\025\025222################!!!!!\026\026\026\026\026\026\026\026\026\026\026################!!!!\026\026\026\026\026\026\026\026\026\026\026\026################!!!!\026\026\026\026\026\026\026\026\026\026\026\026(((((((((((((((((((\026\026\026\026\026\026\026\026\026\026\026\026\026(((((((((((((((((((((\026\026\026\026\026\026\026\026\026\026\026\"\"\"(((((((((((((((((((--------\027\027\"\"\"\"\"\"\"\"((((((((((((((----------\"\"\"\"\"\"\"\"\"\"\"(((((((((((----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"((((((((----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(((((----------\030\033\033\033\033;;;;;;;;;;77777777777777777\030\030\030\033;;;;;;;;;;;77777777777777777\030\030\030\030;;;;;;;;;;;77777777777777777\030\030\030\030\030;;;;;;;;;;77777777777777777\030\030\030\030\030;;;;;;;;;;77777777777777777\030\030\030\030\030\030;;;;;;;;;;7777777777777777\030\030\030\030\030\030\030;;;;;;;;;7777777777777777\030\030\030\030\030\030\030\030;;;;;;;;;777777777777777\030\030\030\030\030\030\030\030\030;;;;;;;;777777777777777\030\030\030\030\030\030\030\030\030\030;;;;;;;;77777777777777\030\030\030\030\030\030\030\030\030\030\030;;;;;;;77777777777777\030\030\030\030\030\030\030\030\030\030\030\030;;;;;;;7777777777777\036\036\036\036\036\036\030\030\030\030\030\030\030;;;::::777777777777\036\036\036\036\036\036\036\036\036\036\036?????::::::7777776666\036\036\036\036\036\036\036\035\035\035\035\035??????::::6666666666\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035??::6666666666%%%%%%\035\035\035\035\035\035\035\035\035\035\035\035\035\035==6666666666%%%%%%###\035\035\035\035\035\035\035\035\035\025\025\025==666666666############&\025\025\025\025\025\025\025\025\025\025\02566666666##############\025\025\025\025\025\025\025\025\025\025\0256666666###############!\025\025\025\025\025\025\025\025\025\025\02566666###############!!!!\025\025\025\025\025\025\025\025\025\025666###############!!!!!!\026\026\026\026\026\026\026\026\026\026\026###############!!!!!\026\026\026\026\026\026\026\026\026\026\026\026###############!!!!!\026\026\026\026\026\026\026\026\026\026\026\026((((((((((((((((((!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"((((((((((((((((\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"((((((((((((((----\026\026\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"(((((((((((--------\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"(((((((((----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"((((((----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$----------\030\030\030;;;;;;;;;;;;77777777777777777\030\030\030;;;;;;;;;;;;77777777777777777\030\030\030\030;;;;;;;;;;;77777777777777777\030\030\030\030;;;;;;;;;;;;7777777777777777\030\030\030\030\030;;;;;;;;;;;7777777777777777\030\030\030\030\030;;;;;;;;;;;7777777777777777\030\030\030\030\030\030;;;;;;;;;;7777777777777777\030\030\030\030\030\030\030;;;;;;;;;;777777777777777\030\030\030\030\030\030\030\030;;;;;;;;;777777777777777\036\036\036\030\030\030\030\030\030;;;;;;;;;77777777777777\036\036\036\036\036\036\036\036\030\030;;;;;;;;77777777777777\036\036\036\036\036\036\036\036\036\036\036\036;;;;;;;7777777777777\036\036\036\036\036\036\036\036\036\036\036\036\036\036;;;:::777777777777\036\036\036\036\036\036\036\036\036\036\036\036\036????:::::6666666666\036\036\036\036\036\036\036\036\036\035\035\035\035\035\035\035???::66666666666\036\036\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035==66666666666%%%\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035===6666666666########\035\035\035\035\035\035\035\035\035\035\035====666666666############\035\025\025\025\025\025\025\025\025\025==66666666##############\025\025\025\025\025\025\025\025\025\025\0256666666##############!!!\025\025\025\025\025\025\025\025\025\02566666##############!!!!!!\025\025\025\025\025\025\025\0256666##############!!!!!!!\026\026\026\026\026\026\026\026\026\026\026##############!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026##############!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"(((((((((((!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"((((((((((((\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"(((((((((((\026\026\026\026\026\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"(((((((((------\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"((((((---------\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$---------\030\030;;;;;;;;;;;;;77777777777777777\030\030\030;;;;;;;;;;;;;7777777777777777\030\030\030;;;;;;;;;;;;;7777777777777777\030\030\030;;;;;;;;;;;;;7777777777777777\036\030\030\030;;;;;;;;;;;;7777777777777777\036\036\036\030\030;;;;;;;;;;;7777777777777777\036\036\036\036\036;;;;;;;;;;;;777777777777777\036\036\036\036\036\036\036;;;;;;;;;;777777777777777\036\036\036\036\036\036\036\036;;;;;;;;;;77777777777777\036\036\036\036\036\036\036\036\036\036;;;;;;;;77777777777777\036\036\036\036\036\036\036\036\036\036\036;;;;;;;;7777777777777\036\036\036\036\036\036\036\036\036\036\036\036\036;;;;;;7777777777777\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036;;;;:777777777666\036\036\036\036\036\036\036\036\036\036\036\036\036\036\036???:::66666666666\036\036\036\036\036\036\036\036\036\036\036\035\035\035\035\035\035\035===66666666666\036\036\036\036\036\035\035\035\035\035\035\035\035\035\035\035\035\035====6666666666#\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035\035=====666666666########\035\035\035\035\035\035\035\035\035\035=====666666666############\035\035\025\025\025\025\025\025====66666666#############!!\025\025\025\025\025\025\025\025==6666666#############!!!!!\025\025\025\025\025\025\025\025666666#############!!!!!!!!\025\026\026\026\026\026\0266666#############!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026#############!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026#############!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"(((((!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"((((((((\026\026\026\026\026\026\026\026\026\026\026\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"(((((((\026\026\026\026\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"(((((-----\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"((--------\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$----------\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$--------\036\036\036\036;;;;;;;;;;;;7777777777777777\036\036\036\036;;;;;;;;;;;;7777777777777777\036\036\036\036;;;;;;;;;;;;7777777777777777\036\036\036\036\036;;;;;;;;;;;7777777777777777\036\036\036\036\036;;;;;;;;;;;;777777777777777\036\036\036\036\036\036;;;;;;;;;;;777777777777777\036\036\036\036\036\036\036;;;;;;;;;;777777777777777\036\036\036\036\036\036\036\036;;;;;;;;;;77777777777777\036\036\036\036\036\036\036\036\036\036;;;;;;;;77777777777777\036\036\036\036\036\036\036\036\036\036\036;;;;;;;77777777777777\032\032\036\036\036\036\036\036\036\036\036\036\036;;;;;;7777777777777\032\032\032\036\036\036\036\036\036\036\036\036\036\036\036;;;;;777777777777\032\032\032\032\036\036\036\036\036\036\036\036\036\036\036\036\036;;;666666666666\032\032\032\032\032\032\036\036\036\036\036\036\036\036\036\036\036====66666666666\032\032\032\032\032\032\032\036\036\036\036\036\035\035\035\035\035====66666666666\032\032\032\032\032\032\032\032\035\035\035\035\035\035\035\035\035=====6666666666\032\032\032\035\035\035\035\035\035\035\035\035\035\035\035\035\035======666666666#######\035\035\035\035\035\035\035\035\035\035=======66666666############\035\035\035\035\025=======66666666############!!!!\025\025\025\025\025====6666666############!!!!!!!\025\025\025\025\025\025=666666############!!!!!!!!!\026\026\026\026\026\026\0266666############!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026###########!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026###########!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"\"\"((((\026\026\026\026\026\026\026\026\026\026\026\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"((((\026\026\026\026\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"((--\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$----\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$-------\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$--------\032\032\032\032\032\036;;;;;;;;;;7777777777777777\032\032\032\032\032\036;;;;;;;;;;7777777777777777\032\032\032\032\032\036;;;;;;;;;;;777777777777777\032\032\032\032\032\032\036;;;;;;;;;;777777777777777\032\032\032\032\032\032\036;;;;;;;;;;777777777777777\032\032\032\032\032\032\036\036;;;;;;;;;777777777777777\032\032\032\032\032\032\036\036\036;;;;;;;;777777777777777\032\032\032\032\032\032\032\036\036\036;;;;;;;;77777777777777\032\032\032\032\032\032\032\036\036\036\036;;;;;;;77777777777777\032\032\032\032\032\032\032\032\036\036\036\036\036;;;;;;7777777777777\032\032\032\032\032\032\032\032\032\036\036\036\036\036;;;;;7777777777777\032\032\032\032\032\032\032\032\032\032\036\036\036\036\036\036;;;;777777766666\032\032\032\032\032\032\032\032\032\032\032\036\036\036\036\036\036\036==666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\036\036\036\036====66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\035\035======6666666666\032\032\032\032\032\032\032\032\032\032\032\035\035\035\035\035======6666666666\032\032\032\032\032\032\032\035\035\035\035\035\035\035\035\035=======666666666#######\035\035\035\035\035\035\035\035\035========66666666##########!\037\037\037\037\037\037\037=======6666666##########!!!!!\037\037\037\037\037\037\037===6666666##########!!!!!!!!\037\037\037\037\037\037\037\037666666##########!!!!!!!!!!!\037\026\026\026\026\026\0266666##########!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026##########!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"#####!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!!\026\026\026\026\026\026\026\026\026\026\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\026\026\026\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$---\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$-----\027\027\032\032\032\032\032\032\032\032;;;;;;;;;777777777777777\032\032\032\032\032\032\032\032;;;;;;;;;777777777777777\032\032\032\032\032\032\032\032;;;;;;;;;777777777777777\032\032\032\032\032\032\032\032\032;;;;;;;;777777777777777\032\032\032\032\032\032\032\032\032;;;;;;;;777777777777777\032\032\032\032\032\032\032\032\032\032;;;;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032;;;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032;;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;;;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;777777777766\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;=666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032==666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032====66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=======6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\035=======6666666666\032\032\032\032\032\032\032\032\032\032\035\035\035\035=========666666666######\035\035\035\035\037\037\037\037\037=========66666666#########\037\037\037\037\037\037\037\037\037\037======6666666#########!!!!\037\037\037\037\037\037\037\037\037\037===666666#########!!!!!!!\037\037\037\037\037\037\037\037\037\037\03766666#########!!!!!!!!!!!\037\037\037\037\037\037\037\0376666#########!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026########!!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"\"!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\026\026\026\026\026\026\026\026\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$--\027\027\027\027\032\032\032\032\032\032\032\032\032\032;;;;;;;777777777777777\032\032\032\032\032\032\032\032\032\032\032;;;;;;777777777777777\032\032\032\032\032\032\032\032\032\032\032;;;;;;777777777777777\032\032\032\032\032\032\032\032\032\032\032;;;;;;777777777777777\032\032\032\032\032\032\032\032\032\032\032\032;;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032;;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;7777777777766\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032===66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032====66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=======6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032=========666666666\032\032\032\032\032\032\032\032\032\032\032\032\032==========666666666####\037\037\037\037\037\037\037\037\037\037\037\037\037=======66666666#######\037\037\037\037\037\037\037\037\037\037\037\037\037=====6666666#######!!!!\037\037\037\037\037\037\037\037\037\037\037\037\037==666666#######!!!!!!!!\037\037\037\037\037\037\037\037\037\037\037\03766666#######!!!!!!!!!!!\037\037\037\037\037\037\037\037\037\037\037666#######!!!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026######!!!!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"\"!!!!!!\026\026\026\026\026\026\026\026\026\026\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!\026\026\026\026\026\026\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\027\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$$\027\027\027\027\027\027\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;7777777777766\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032766666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032===66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032====66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032======6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=======6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032=========666666666\032\032\032\032\032\032\032\032\032\032\032\037\037\037==========66666666\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037======66666666####\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037===6666666#####!!!!\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037666666####!!!!!!!!!\037\037\037\037\037\037\037\037\037\037\037\037\037\037\0376666####!!!!!!!!!!!!!\037\037\037\037\037\037\037\037\037\037\037\037666####!!!!!!!!!!!!!!!!\037\026\026\026\026\026\026\026\026\026\026\026\"\"#!!!!!!!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"\"\"\"!!!!\026\026\026\026\026\026\026\026\026\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\026\026\026\026\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\027\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$$\027\027\027\027\027\027\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;77777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032;7777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\0327777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\0327777777777666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032===66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032====66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032======6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032========666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032=========666666666\032\032\032\032\032\032\032\032\032\034\037\037\037\037\037\037========66666666\034\034\034\034\034\034\034\034\034\034\037\037\037\037\037\037\037\037\037======6666666\034\034\034\034\034\034\034\034\034\034\034\037\037\037\037\037\037\037\037\037\037\037\037==6666666!!!!!!\034\034\034\034\034\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037666666!!!!!!!!!!!\034\037\037\037\037\037\037\037\037\037\037\037\037\037\037\037\0376666!!!!!!!!!!!!!!!\037\037\037\037\037\037\037\037\037\037\037\037\034\034\03466!!!!!!!!!!!!!!!!!!\037\037\037\037\037\037\037\034\034\026\026\026\026\026\"\"\"\"!!!!!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"!!!!\026\026\026\026\026\026\026\026\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\026\026\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\027\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$$$\027\027\027\027\027\027\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\03277777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\03277777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\0327777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\0327777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\0327777777777777\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\0327777777777766\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032777777666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032666666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032==66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032===66666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032=====6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032======6666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032========666666666\032\032\032\032\032\032\032\032\032\032\032\032\032\032\034=========66666666\032\032\032\032\032\032\034\034\034\034\034\034\034\034\034\034\034\034======66666666\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034====6666666\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034=666666\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\03466666!!!!!!!!\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034666!!!!!!!!!!!!!\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\0346!!!!!!!!!!!!!!!!!\034\034\034\034\034\034\034\034\034\034\034\034\034\034\034\"\"\"\"\"!!!!!!!!!!!!!!\026\026\026\026\026\026\026\026\026\026\026\026\026\"\"\"\"\"\"\"\"\"\"\"!!!!!!!!\026\026\026\026\026\026\026\026\026\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"!!!\026\026\026\026\026\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\027\027\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\027\027\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$\027\027\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$\027\027\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$\027\027\027\027\027\027\027\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$$$\027\027\027\027\027\027".getBytes(StandardCharsets.ISO_8859_1)
    ;

    /**
     * Constructs a default PaletteReducer that uses the Ziggurat64 palette.
     */
    public PaletteReducer() {
        exact(Coloring.ZIGGURAT64, ENCODED_ZIGGURAT);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info).
     *
     * @param rgbaPalette an array of RGBA8888 ints to use as a palette
     */
    public PaletteReducer(int[] rgbaPalette) {
        paletteMapping = new byte[0x8000];
        exact(rgbaPalette);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info).
     *
     * @param rgbaPalette an array of RGBA8888 ints to use as a palette
     * @param metric      almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public PaletteReducer(int[] rgbaPalette, ColorMetric metric) {
        paletteMapping = new byte[0x8000];
        exact(rgbaPalette, metric);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of Color objects as a palette (see {@link #exact(Color[])}
     * for more info).
     *
     * @param colorPalette an array of Color objects to use as a palette
     */
    public PaletteReducer(Color[] colorPalette) {
        paletteMapping = new byte[0x8000];
        exact(colorPalette);
    }

    /**
     * Constructs a PaletteReducer that uses the given Array of Color objects as a palette (see {@link #exact(Color[])}
     * for more info).
     *
     * @param colorPalette an array of Color objects to use as a palette
     */
    public PaletteReducer(Array<Color> colorPalette) {
        paletteMapping = new byte[0x8000];
        if (colorPalette != null)
            exact(colorPalette.items, colorPalette.size);
        else
            exact(Coloring.ZIGGURAT64, ENCODED_ZIGGURAT);
    }

    /**
     * Constructs a PaletteReducer that analyzes the given Pixmap for color count and frequency to generate a palette
     * (see {@link #analyze(Pixmap)} for more info).
     *
     * @param pixmap a Pixmap to analyze in detail to produce a palette
     */
    public PaletteReducer(Pixmap pixmap) {
        paletteMapping = new byte[0x8000];
        analyze(pixmap);
    }
    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info) and an encoded String to use to look up pre-loaded color data.
     *
     * @param palette an array of RGBA8888 ints to use as a palette
     * @param preload an ISO-8859-1-encoded String containing preload data
     */
    public PaletteReducer(int[] palette, byte[] preload)
    {
        exact(palette, preload);
    }
    /**
     * Constructs a PaletteReducer that analyzes the given Pixmap for color count and frequency to generate a palette
     * (see {@link #analyze(Pixmap, int)} for more info).
     *
     * @param pixmap    a Pixmap to analyze in detail to produce a palette
     * @param threshold the minimum difference between colors required to put them in the palette (default 400)
     */
    public PaletteReducer(Pixmap pixmap, int threshold) {
        paletteMapping = new byte[0x8000];
        analyze(pixmap, threshold);
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param color1 an RGBA8888 color as an int
     * @param color2 an RGBA8888 color as an int
     * @return the difference between the given colors, as a positive double
     */
    public static double difference(final int color1, final int color2) {
        // if one color is transparent and the other isn't, then this is max-different
        if(((color1 ^ color2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
        final int r1 = (color1 >>> 24), g1 = (color1 >>> 16 & 0xFF), b1 = (color1 >>> 8 & 0xFF),
            r2 = (color2 >>> 24), g2 = (color2 >>> 16 & 0xFF), b2 = (color2 >>> 8 & 0xFF),
            rmean = r1 + r2,
            r = r1 - r2,
            g = g1 - g2,
            b = b1 - b2,
            y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
//        return (((512 + rmean) * r * r) >> 8) + g * g + (((767 - rmean) * b * b) >> 8);
        return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param color1 an RGBA8888 color as an int
     * @param r2     red value from 0 to 255, inclusive
     * @param g2     green value from 0 to 255, inclusive
     * @param b2     blue value from 0 to 255, inclusive
     * @return the difference between the given colors, as a positive double
     */
    public static double difference(final int color1, int r2, int g2, int b2) {
        if((color1 & 0x80) == 0) return Double.POSITIVE_INFINITY; // if a transparent color is being compared, it is always different
        final int
            r1 = (color1 >>> 24),
            g1 = (color1 >>> 16 & 0xFF),
            b1 = (color1 >>> 8 & 0xFF),
            rmean = (r1 + r2),
            r = r1 - r2,
            g = g1 - g2,
            b = b1 - b2,
            y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
        return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param r1 red value from 0 to 255, inclusive
     * @param g1 green value from 0 to 255, inclusive
     * @param b1 blue value from 0 to 255, inclusive
     * @param r2 red value from 0 to 255, inclusive
     * @param g2 green value from 0 to 255, inclusive
     * @param b2 blue value from 0 to 255, inclusive
     * @return the difference between the given colors, as a positive double
     */
    public static double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
        final int rmean = (r1 + r2),
            r = r1 - r2,
            g = g1 - g2 << 1,
            b = b1 - b2,
            y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
//        return (((512 + rmean) * r * r) >> 8) + g * g + (((767 - rmean) * b * b) >> 8);
//        return (((1024 + rmean) * r * r) >> 9) + g * g + (((1534 - rmean) * b * b) >> 9) + y * y * 5;
        return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
    }

    /**
     * Gets a pseudo-random float between -0.65625f and 0.65625f, determined by the upper 23 bits of seed.
     * This currently uses a uniform distribution for its output, but earlier versions intentionally used a non-uniform
     * one; a non-uniform distribution can sometimes work well but is very dependent on how error propagates through a
     * dithered image, and in bad cases can produce bands of bright mistakenly-error-adjusted colors.
     * @param seed any int, but only the most-significant 23 bits will be used
     * @return a float between -0.65625f and 0.65625f, with fairly uniform distribution as long as seed is uniform
     */
    static float randomXi(int seed)
    {
        return ((seed >> 9) * 0x1.5p-23f);
//        return NumberUtils.intBitsToFloat((seed & 0x7FFFFF & ((seed >>> 11 & 0x400000)|0x3FFFFF)) | 0x3f800000) - 1.4f;
//        return NumberUtils.intBitsToFloat((seed & 0x7FFFFF & ((seed >>> 11 & 0x600000)|0x1FFFFF)) | 0x3f800000) - 1.3f;
    }

    /**
     * Builds the palette information this PNG8 stores from the RGBA8888 ints in {@code rgbaPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in rgbaPalette, and only if it is {@code 0} (fully transparent
     * black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only has one color, then
     * this defaults to the Ziggurat64 palette with 64 colors (including transparent).
     *
     * @param rgbaPalette an array of RGBA8888 ints; all will be used up to 256 items or the length of the array
     */
    public void exact(int[] rgbaPalette) {
        exact(rgbaPalette, basicMetric);
    }
    /**
     * Builds the palette information this PNG8 stores from the RGBA8888 ints in {@code rgbaPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in rgbaPalette, and only if it is {@code 0} (fully transparent
     * black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only has one color, then
     * this defaults to the Ziggurat64 palette with 64 colors (including transparent).
     *
     * @param rgbaPalette an array of RGBA8888 ints; all will be used up to 256 items or the length of the array
     * @param metric      almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public void exact(int[] rgbaPalette, ColorMetric metric) {
        if (rgbaPalette == null || rgbaPalette.length < 2) {
            exact(Coloring.ZIGGURAT64, ENCODED_ZIGGURAT);
            return;
        }
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        final int plen = Math.min(256, rgbaPalette.length);
        int color, c2;
        double dist;
        for (int i = 0; i < plen; i++) {
            color = rgbaPalette[i];
            if ((color & 0x80) != 0) {
                paletteArray[i] = color;
                paletteMapping[(color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F)] = (byte) i;
            }
        }
        int rr, gg, bb;
        for (int r = 0; r < 32; r++) {
            rr = (r << 3 | r >>> 2);
            for (int g = 0; g < 32; g++) {
                gg = (g << 3 | g >>> 2);
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        bb = (b << 3 | b >>> 2);
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < plen; i++) {
                            if (dist > (dist = Math.min(dist, metric.difference(paletteArray[i], rr, gg, bb))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
//        generatePreloadCode(paletteMapping);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the given array of RGBA8888 ints as a palette (see
     * {@link #exact(int[])} for more info) and an encoded String to use to look up pre-loaded color data. The encoded
     * bytes are going to be hard to produce if you intend to do this from outside isonomicon; they were generated in the
     * related ColorWeaver project (in its PreloadCodeGenerator test). For external code, there's slightly
     * more startup time spent when initially calling {@link #exact(int[])}, but it will produce the same result. 
     *
     * @param palette an array of RGBA8888 ints to use as a palette
     * @param preload an ISO-8859-1-encoded String containing preload data
     */
    public void exact(int[] palette, byte[] preload)
    {
        for (int i = 0; i < 256 & i < palette.length; i++) {
            int color = palette[i];
            if((color & 0x80) != 0)
                paletteArray[i] = color;
        }
        paletteMapping = preload;
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only
     * has one color, then this defaults to the Ziggurat64 palette with 64 colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items or the length of the array
     */
    public void exact(Color[] colorPalette) {
        exact(colorPalette, 256, basicMetric);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only
     * has one color, then this defaults to the Ziggurat64 palette with 64 colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items or the length of the array
     * @param metric       almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public void exact(Color[] colorPalette, ColorMetric metric) {
        exact(colorPalette, 256, metric);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, only has
     * one color, or limit is less than 2, then this defaults to the Ziggurat64 palette with 64 colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items, limit, or the length of the array
     * @param limit        a limit on how many Color items to use from colorPalette; useful if colorPalette is from an Array
     */
    public void exact(Color[] colorPalette, int limit) {
        exact(colorPalette, limit, basicMetric);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, only has
     * one color, or limit is less than 2, then this defaults to the Ziggurat64 palette with 64 colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items, limit, or the length of the array
     * @param limit        a limit on how many Color items to use from colorPalette; useful if colorPalette is from an Array
     * @param metric       almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public void exact(Color[] colorPalette, int limit, ColorMetric metric) {
        if (colorPalette == null || colorPalette.length < 2 || limit < 2) {
            exact(Coloring.ZIGGURAT64, ENCODED_ZIGGURAT);
            return;
        }
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        final int plen = Math.min(Math.min(256, colorPalette.length), limit);
        int color, c2;
        double dist;
        for (int i = 0; i < plen; i++) {
            color = Color.rgba8888(colorPalette[i]);
            paletteArray[i] = color;
            paletteMapping[(color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F)] = (byte) i;
        }
        int rr, gg, bb;
        for (int r = 0; r < 32; r++) {
            rr = (r << 3 | r >>> 2);
            for (int g = 0; g < 32; g++) {
                gg = (g << 3 | g >>> 2);
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        bb = (b << 3 | b >>> 2);
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < plen; i++) {
                            if (dist > (dist = Math.min(dist, metric.difference(paletteArray[i], rr, gg, bb))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
    }
    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * uses a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least 400, it is
     * allowed in the palette, otherwise it is kept out for being too similar to existing colors. This doesn't return a
     * value but instead stores the palette info in this object; a PaletteReducer can be assigned to the
     * {@link PNG8#palette} field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     */
    public void analyze(Pixmap pixmap) {
        analyze(pixmap, 400);
    }

    private static final Comparator<IntIntMap.Entry> entryComparator = new Comparator<IntIntMap.Entry>() {
        @Override
        public int compare(IntIntMap.Entry o1, IntIntMap.Entry o2) {
            return o2.value - o1.value;
        }
    };


    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * takes a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least
     * {@code threshold}, it is allowed in the palette, otherwise it is kept out for being too similar to existing
     * colors. The threshold is usually between 250 and 1000, and 400 is a good default. This doesn't return a value but
     * instead stores the palette info in this object; a PaletteReducer can be assigned to the {@link PNG8#palette}
     * field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap    a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     * @param threshold a minimum color difference as produced by {@link #difference(int, int)}; usually between 250 and 1000, 400 is a good default
     */
    public void analyze(Pixmap pixmap, int threshold) {
        analyze(pixmap, threshold, 256);
    }
    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * takes a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least
     * {@code threshold}, it is allowed in the palette, otherwise it is kept out for being too similar to existing
     * colors. The threshold is usually between 250 and 1000, and 400 is a good default. This doesn't return a value but
     * instead stores the palette info in this object; a PaletteReducer can be assigned to the {@link PNG8#palette}
     * field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap    a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     * @param threshold a minimum color difference as produced by {@link #difference(int, int)}; usually between 250 and 1000, 400 is a good default
     */
    public void analyze(Pixmap pixmap, int threshold, int limit) {
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        int color;
        final int width = pixmap.getWidth(), height = pixmap.getHeight();
        IntIntMap counts = new IntIntMap(limit);
        int hasTransparent = 0;
        int[] reds = new int[limit], greens = new int[limit], blues = new int[limit];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                color = pixmap.getPixel(x, y);
                if ((color & 0x80) != 0) {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    counts.getAndIncrement(color, 0, 1);
                } else {
                    hasTransparent = 1;
                }
            }
        }
        final int cs = counts.size;
        ArrayList<IntIntMap.Entry> es = new ArrayList<>(cs);
        for(IntIntMap.Entry e : counts)
        {
            IntIntMap.Entry e2 = new IntIntMap.Entry();
            e2.key = e.key;
            e2.value = e.value;
            es.add(e2);
        }
        Collections.sort(es, entryComparator);
        if (cs + hasTransparent <= limit) {
            int i = hasTransparent;
            for(IntIntMap.Entry e : es) {
                color = e.key;
                paletteArray[i] = color;
                color = (color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F);
                paletteMapping[color] = (byte) i;
                reds[i] = color >>> 10;
                greens[i] = color >>> 5 & 31;
                blues[i] = color & 31;
                i++;
            }
        } else // reduce color count
        {
            int i = 1, c = 0;
            PER_BEST:
            for (; i < limit && c < cs;) {
                color = es.get(c++).key;
                for (int j = 1; j < i; j++) {
                    if (difference(color, paletteArray[j]) < threshold)
                        continue PER_BEST;
                }
                paletteArray[i] = color;
                color = (color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F);
                paletteMapping[color] = (byte) i;
                reds[i] = color >>> 10;
                greens[i] = color >>> 5 & 31;
                blues[i] = color & 31;
                i++;
            }
        }
        int c2;
        double dist;
        for (int r = 0; r < 32; r++) {
            for (int g = 0; g < 32; g++) {
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        dist = Double.POSITIVE_INFINITY;
                        for (int i = 1; i < limit; i++) {
                            if (dist > (dist = Math.min(dist, difference(reds[i], greens[i], blues[i], r, g, b))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
    }

    /**
     * Changes the "strength" of the dither effect applied during {@link #reduce(Pixmap)} calls. The default is 1f,
     * and while both values higher than 1f and lower than 1f are valid, they should not be negative. If you want dither
     * to be eliminated, don't set dither strength to 0; use {@link #reduceSolid(Pixmap)} instead of reduce().
     * @param ditherStrength dither strength as a non-negative float that should be close to 1f
     */
    public void setDitherStrength(float ditherStrength) {
        this.ditherStrength = 0.5f * ditherStrength;
        this.halfDitherStrength = 0.25f * ditherStrength;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can
     * using Floyd-Steinberg (this merely delegates to {@link #reduceFloydSteinberg(Pixmap)}).
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduce (Pixmap pixmap) {
        return reduceFloydSteinberg(pixmap);
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, without dithering. This produces
     * blocky solid sections of color in most images where the palette isn't exact, instead of checkerboard-like
     * dithering patterns. If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceSolid (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y);
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[
                        paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using
     * Burkes dithering instead of the Floyd-Steinberg dithering that {@link #reduce(Pixmap)} uses.
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. Burkes dithering probably takes about as
     * much time as Floyd-Steinberg, and has pretty close quality.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceBurkes (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        float r4, r2, r1, g4, g2, g1, b4, b2, b1;
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                        paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    r4 = rdiff * halfDitherStrength;
                    g4 = gdiff * halfDitherStrength;
                    b4 = bdiff * halfDitherStrength;
                    r2 = r4 * 0.5f;
                    g2 = g4 * 0.5f;
                    b2 = b4 * 0.5f;
                    r1 = r4 * 0.25f;
                    g1 = g4 * 0.25f;
                    b1 = b4 * 0.25f;
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += r4;
                        curErrorGreen[px+1] += g4;
                        curErrorBlue[px+1]  += b4;
                        if(px < lineLen - 2)
                        {

                            curErrorRed[px+2]   += r2;
                            curErrorGreen[px+2] += g2;
                            curErrorBlue[px+2]  += b2;
                        }
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += r2;
                            nextErrorGreen[px-1] += g2;
                            nextErrorBlue[px-1]  += b2;
                            if(px > 1)
                            {
                                nextErrorRed[px-2]   += r1;
                                nextErrorGreen[px-2] += g1;
                                nextErrorBlue[px-2]  += b1;
                            }
                        }
                        nextErrorRed[px]   += r4;
                        nextErrorGreen[px] += g4;
                        nextErrorBlue[px]  += b4;
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += r2;
                            nextErrorGreen[px+1] += g2;
                            nextErrorBlue[px+1]  += b2;
                            if(px < lineLen - 2)
                            {

                                nextErrorRed[px+2]   += r1;
                                nextErrorGreen[px+2] += g1;
                                nextErrorBlue[px+2]  += b1;
                            }
                        }
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using a
     * modified version of the algorithm presented in "Simple gradient-based error-diffusion method" by Xaingyu Y. Hu in
     * the Journal of Electronic Imaging, 2016. This algorithm uses pseudo-randomly-generated noise to adjust
     * Floyd-Steinberg dithering, with input for the pseudo-random state obtained by the non-transparent color values as
     * they are encountered. Very oddly, this tends to produce less random-seeming dither than
     * {@link #reduceBurkes(Pixmap)}, with this method often returning regular checkerboards where Burkes may produce
     * splotches of color. If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. This method is probably slower than
     * {@link #reduceBurkes(Pixmap)} even though Burkes propagates error to more pixels, because this method also has to
     * generate two random values per non-transparent pixel. The random number "algorithm" this uses isn't very good
     * because it doesn't have to be good, it should just be fast and avoid clear artifacts; it's similar to one of
     * <a href="http://www.drdobbs.com/tools/fast-high-quality-parallel-random-number/231000484?pgno=2">Mark Overton's
     * subcycle generators</a> (which are usually paired, but that isn't the case here), but because it's
     * constantly being adjusted by additional colors as input, it may be more comparable to a rolling hash. This uses
     * {@link #randomXi(int)} to get the parameter in Hu's paper that's marked as {@code aξ}, but our randomXi() is
     * adjusted so it has half the range (from -0.5 to 0.5 instead of -1 to 1). That quirk ends up getting rather high
     * quality for this method, though it may have some grainy appearance in certain zones with mid-level intensity (an
     * acknowledged issue with the type of noise-based approach Hu uses, and not a very severe problem).
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceWithNoise (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff, state = 0xFEEDBEEF;
        byte er, eg, eb, paletteIndex;
        //float xir1, xir2, xig1, xig2, xib1, xib2, // would be used if random factors were per-channel
        // used now, where random factors are determined by whole colors as ints
        float xi1, xi2, w1 = ditherStrength * 0.125f, w3 = w1 * 3f, w5 = w1 * 5f, w7 = w1 * 7f;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                        paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    state += (color + 0x41C64E6D) ^ color >>> 7;
                    state = (state << 21 | state >>> 11);
                    xi1 = randomXi(state);
                    state ^= (state << 5 | state >>> 27) + 0x9E3779B9;
                    xi2 = randomXi(state);

//                    state += rdiff ^ rdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xir1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xir2 = randomXi(state);
//                    state += gdiff ^ gdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xig1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xig2 = randomXi(state);
//                    state += bdiff ^ bdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xib1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xib2 = randomXi(state);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * w7 * (1f + xi1);
                        curErrorGreen[px+1] += gdiff * w7 * (1f + xi1);
                        curErrorBlue[px+1]  += bdiff * w7 * (1f + xi1);
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * w3 * (1f + xi2);
                            nextErrorGreen[px-1] += gdiff * w3 * (1f + xi2);
                            nextErrorBlue[px-1]  += bdiff * w3 * (1f + xi2);
                        }
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += rdiff * w1 * (1f - xi2);
                            nextErrorGreen[px+1] += gdiff * w1 * (1f - xi2);
                            nextErrorBlue[px+1]  += bdiff * w1 * (1f - xi2);
                        }
                        nextErrorRed[px]   += rdiff * w5 * (1f - xi1);
                        nextErrorGreen[px] += gdiff * w5 * (1f - xi1);
                        nextErrorBlue[px]  += bdiff * w5 * (1f - xi1);
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }
    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using
     * Sierra Lite dithering instead of the Floyd-Steinberg dithering that {@link #reduce(Pixmap)} uses.
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is meant to be a little faster than Floyd-Steinberg, but the quality isn't quite as good sometimes.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceSierraLite (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                        paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * ditherStrength;
                        curErrorGreen[px+1] += gdiff * ditherStrength;
                        curErrorBlue[px+1]  += bdiff * ditherStrength;
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * halfDitherStrength;
                            nextErrorGreen[px-1] += gdiff * halfDitherStrength;
                            nextErrorBlue[px-1]  += bdiff * halfDitherStrength;
                        }
                        nextErrorRed[px]   += rdiff * halfDitherStrength;
                        nextErrorGreen[px] += gdiff * halfDitherStrength;
                        nextErrorBlue[px]  += bdiff * halfDitherStrength;
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using the
     * commonly-used Floyd-Steinberg dithering. If you want to reduce the colors in a Pixmap based on what it currently
     * contains, call {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. This method is probably about the same
     * speed as {@link #reduceBurkes(Pixmap)}.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceFloydSteinberg (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        float w1 = ditherStrength * 0.125f, w3 = w1 * 3f, w5 = w1 * 5f, w7 = w1 * 7f;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                        paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * w7;
                        curErrorGreen[px+1] += gdiff * w7;
                        curErrorBlue[px+1]  += bdiff * w7;
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * w3;
                            nextErrorGreen[px-1] += gdiff * w3;
                            nextErrorBlue[px-1]  += bdiff * w3;
                        }
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += rdiff * w1;
                            nextErrorGreen[px+1] += gdiff * w1;
                            nextErrorBlue[px+1]  += bdiff * w1;
                        }
                        nextErrorRed[px]   += rdiff * w5;
                        nextErrorGreen[px] += gdiff * w5;
                        nextErrorBlue[px]  += bdiff * w5;
                    }
                }
            }
        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    public Pixmap reduceWithRoberts (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, adj;
        byte paletteIndex;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    adj = (int)((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL >> 57) * ditherStrength);
                    adj ^= adj >> 31;
                    //adj = (-(adj >>> 4 & 1) ^ adj) & 7;
                    adj -= 32 * ditherStrength;
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (adj), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (adj), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (adj), 0, 0xFF);
                    paletteIndex =
                        paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    public Pixmap reduceRobertsMul (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        float adj, str = ditherStrength * (256f / paletteArray.length) * 0x2.5p-27f;
        long pos;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL >> 40) * 0x1.Fp-26f) * ditherStrength) + 1f;
//                    color |= (color >>> 5 & 0x07070700) | 0xFE;
//                    int rr = MathUtils.clamp((int) (((color >>> 24)       ) * adj), 0, 0xFF);
//                    int gg = MathUtils.clamp((int) (((color >>> 16) & 0xFF) * adj), 0, 0xFF);
//                    int bb = MathUtils.clamp((int) (((color >>> 8)  & 0xFF) * adj), 0, 0xFF);
                    //0xD1B54A32D192ED03L, 0xABC98388FB8FAC03L, 0x8CB92BA72F3D8DD7L
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL) >> 40) * str);
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );//MathUtils.clamp((int) (rr * (1f + adj)), 0, 0xFF);
                    int gg = ((color >>> 16) & 0xFF);//MathUtils.clamp((int) (gg * (1f + adj)), 0, 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);//MathUtils.clamp((int) (bb * (1f + adj)), 0, 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF];
                    pos = (px * 0xC13FA9A902A6328FL - y * 0x91E10DA5C79E7B1DL);
                    pos ^= pos >>> 1;
                    adj = ((pos >> 40) * str);
                    rr = MathUtils.clamp((int) (rr * (1f + adj * ((used >>> 24) - rr >> 3))), 0, 0xFF);
                    gg = MathUtils.clamp((int) (gg * (1f + adj * ((used >>> 16 & 0xFF) - gg >> 3))), 0, 0xFF);
                    bb = MathUtils.clamp((int) (bb * (1f + adj * ((used >>> 8 & 0xFF) - bb >> 3))), 0, 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    public Pixmap reduceRobertsEdit (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        int pos;
        float adj, str = -0x3.Fp-20f * ditherStrength;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL >> 40) * 0x1.Fp-26f) * ditherStrength) + 1f;
//                    color |= (color >>> 5 & 0x07070700) | 0xFE;
//                    int rr = MathUtils.clamp((int) (((color >>> 24)       ) * adj), 0, 0xFF);
//                    int gg = MathUtils.clamp((int) (((color >>> 16) & 0xFF) * adj), 0, 0xFF);
//                    int bb = MathUtils.clamp((int) (((color >>> 8)  & 0xFF) * adj), 0, 0xFF);
                    //0xD1B54A32D192ED03L, 0xABC98388FB8FAC03L, 0x8CB92BA72F3D8DD7L
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL) >> 40) * str);
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );//MathUtils.clamp((int) (rr * (1f + adj)), 0, 0xFF);
                    int gg = ((color >>> 16) & 0xFF);//MathUtils.clamp((int) (gg * (1f + adj)), 0, 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);//MathUtils.clamp((int) (bb * (1f + adj)), 0, 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF];
                    pos = (px * (0xC13FA9A9 + y) + y * (0x91E10DA5 + px));
                    pos += pos >>> 1 ^ pos >>> 3 ^ pos >>> 4;
                    //0xE60E2B722B53AEEBL, 0xCEBD76D9EDB6A8EFL, 0xB9C9AA3A51D00B65L, 0xA6F5777F6F88983FL, 0x9609C71EB7D03F7BL, 
                    //0x86D516E50B04AB1BL
//                    long pr = (px * 0xE60E2B722B53AEEBL - y * 0x86D516E50B04AB1BL),
//                         pg = (px * 0xCEBD76D9EDB6A8EFL + y * 0x9609C71EB7D03F7BL),
//                         pb = (y * 0xB9C9AA3A51D00B65L - px * 0xA6F5777F6F88983FL);
//                    str * ((pr ^ pr >>> 1 ^ pr >>> 3 ^ pr >>> 4) >> 40)
//                    str * ((pg ^ pg >>> 1 ^ pg >>> 3 ^ pg >>> 4) >> 40)
//                    str * ((pb ^ pb >>> 1 ^ pb >>> 3 ^ pb >>> 4) >> 40)
                    //(px + y) * 1.6180339887498949f
                    adj = (pos >> 12) * str;
                    //adj = adj * ditherStrength; //(adj * adj * adj + 0x5p-6f)
                    // + NumberTools.sway(y * 0.7548776662466927f + px * 0.5698402909980532f) * 0.0625f;
                    rr = MathUtils.clamp((int) (rr + (adj * (((used >>> 24) - rr)))), 0, 0xFF); //  * 17 >> 4
                    gg = MathUtils.clamp((int) (gg + (adj * (((used >>> 16 & 0xFF) - gg)))), 0, 0xFF); //  * 23 >> 4
                    bb = MathUtils.clamp((int) (bb + (adj * (((used >>> 8 & 0xFF) - bb)))), 0, 0xFF); // * 5 >> 4
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }
    public Pixmap reduceShaderMimic (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        float pos;
        double adj;
//        final float strength = 0x1.4p-10f * ditherStrength;
        final float strength = ditherStrength * 3.25f;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF];
                    //float len = (rr * 5 + gg * 9 + bb * 2) * strength + 1f;
                    //adj = fract(52.9829189 * fract(dot(vec2(0.06711056, 0.00583715), gl_FragCoord.xy))) * len - len * 0.5;
                    //adj = asin(fract(52.9829189 * fract(dot(vec2(0.06711056, 0.00583715), gl_FragCoord.xy))) * 0.875 
                    //         - fract(dot(vec2(0.7548776662466927, 0.5698402909980532), gl_FragCoord.xy)) * 0.5);
                    //adj = 2.0 * sin(fract(52.9829189 * fract(dot(vec2(0.06711056, 0.00583715), gl_FragCoord.xy))) * 1.44 - 0.72);
                    pos = (px * 0.06711056f + y * 0.00583715f);
                    pos -= (int)pos;
                    pos *= 52.9829189f;
                    pos -= (int)pos;
                    adj = (Math.sqrt(pos) * pos - 0.3125) * strength;
//                    adj = TrigTools.sin(pos * 1.44f - 0.72f) * strength;

//                    pos *= 0.875f;
//                    adj = (px * 0.7548776662466927f + y * 0.5698402909980532f);
//                    adj -= (int)adj;
//                    adj = TrigTools.asin((pos - adj * 0.3125f) * strength) * 1.25f;
                    rr = MathUtils.clamp((int) (rr + (adj * ((rr - (used >>> 24))))), 0, 0xFF);
                    gg = MathUtils.clamp((int) (gg + (adj * ((gg - (used >>> 16 & 0xFF))))), 0, 0xFF);
                    bb = MathUtils.clamp((int) (bb + (adj * ((bb - (used >>> 8 & 0xFF))))), 0, 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * A blue-noise-based dither that uses a tiling 64x64 noise texture to add error to an image;
     * this does use {@link squidpony.squidmath.NumberTools#acos_(float)} to bias results toward the original color.
     * <br>
     * There are times to use {@link #reduceBluish(Pixmap)} and times to use this; each palette and
     * source image will have different qualities of result.
     * @param pixmap will be modified in-place and returned
     * @return pixmap, after modifications
     */
    public Pixmap reduceTrueBlue (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        float adj, strength = ditherStrength * 8;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF];
                    adj = (acos_((BlueNoise.get(px, y, BlueNoise.ALT_NOISE[1]) + 0.5f) * 0.00784313725490196f) - 0.25f) * strength;
                    rr = MathUtils.clamp((int) (rr + (adj * ((rr - (used >>> 24))))), 0, 0xFF);
                    gg = MathUtils.clamp((int) (gg + (adj * ((gg - (used >>> 16 & 0xFF))))), 0, 0xFF);
                    bb = MathUtils.clamp((int) (bb + (adj * ((bb - (used >>> 8 & 0xFF))))), 0, 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * A different kind of blue-noise-based dither; does not diffuse error, and uses a non-repeating blue noise pattern
     * (that isn't quite as strongly measurable as blue noise as what {@link #reduceTrueBlue(Pixmap)} uses). This pattern
     * can be seeded to produce different dithers for otherwise identical inputs; see {@link #reduceBluish(Pixmap, int)}.
     * <br>
     * There are times to use {@link #reduceTrueBlue(Pixmap)} and times to use this; each palette and
     * source image will have different qualities of result.
     * @param pixmap will be modified in-place and returned
     * @return pixmap, after modifications
     */
    public Pixmap reduceBluish (Pixmap pixmap) {
        return reduceBluish(pixmap, 1111111);
    }
    /**
     * A different kind of blue-noise-based dither; does not diffuse error, and uses a non-repeating blue noise pattern
     * (that isn't quite as strongly measurable as blue noise as what {@link #reduceTrueBlue(Pixmap)} uses). This pattern
     * can be seeded to produce different dithers for otherwise identical inputs; the seed can be any int.
     * <br>
     * There are times to use {@link #reduceTrueBlue(Pixmap)} and times to use this; each palette and
     * source image will have different qualities of result.
     * @param pixmap will be modified in-place and returned
     * @param seed any int; will be used to change the dither pattern
     * @return pixmap, after modifications
     */
    public Pixmap reduceBluish (Pixmap pixmap, int seed) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        double adj, strength = ditherStrength;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF];
                    adj = Math.cbrt((BlueNoise.get(px, y, BlueNoise.ALT_NOISE[1]) + 0.5f) * 0.00784313725490196f) * strength;
//                    adj = (BlueNoise.getSeeded(px, y, 1111111) + ((px + y & 1) - 0.3125f) * 32f) * strength;
                    rr = MathUtils.clamp((int) (rr + (adj * ((rr - (used >>> 24))))), 0, 0xFF);
                    gg = MathUtils.clamp((int) (gg + (adj * ((gg - (used >>> 16 & 0xFF))))), 0, 0xFF);
                    bb = MathUtils.clamp((int) (bb + (adj * ((bb - (used >>> 8 & 0xFF))))), 0, 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                        | ((gg << 2) & 0x3E0)
                        | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Retrieves a random non-0 color index for the palette this would reduce to, with a higher likelihood for colors
     * that are used more often in reductions (those with few similar colors). The index is returned as a byte that,
     * when masked with 255 as with {@code (palette.randomColorIndex(random) & 255)}, can be used as an index into a
     * palette array with 256 or less elements that should have been used with {@link #exact(int[])} before to set the
     * palette this uses.
     * @param random a Random instance, which may be seeded
     * @return a randomly selected color index from this palette with a non-uniform distribution, can be any byte but 0
     */
    public byte randomColorIndex(IRNG random)
    {
        return paletteMapping[random.next(15)];
    }

    /**
     * Retrieves a random non-transparent color from the palette this would reduce to, with a higher likelihood for
     * colors that are used more often in reductions (those with few similar colors). The color is returned as an
     * RGBA8888 int; you can assign one of these into a Color with {@link Color#rgba8888ToColor(Color, int)} or
     * {@link Color#set(int)}.
     * @param random a Random instance, which may be seeded
     * @return a randomly selected color from this palette with a non-uniform distribution
     */
    public int randomColor(IRNG random)
    {
        return paletteArray[paletteMapping[random.next(15)] & 255];
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. Both the parameter and the returned color are RGBA8888 ints.
     * @param color an RGBA8888 int that represents a color this should try to find a similar color for in its palette
     * @return an RGBA8888 int representing a color from this palette, or 0 if color is mostly transparent
     * (0 is often but not always in the palette)
     */
    public int reduceSingle(int color)
    {
        if((color & 0x80) == 0) // less visible than half-transparent
            return 0; // transparent
        return paletteArray[paletteMapping[
            (color >>> 17 & 0x7C00)
                | (color >>> 14 & 0x3E0)
                | (color >>> 11 & 0x1F)] & 0xFF];
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. The parameter is a RGBA8888 int, the returned color is a byte index into the
     * {@link #paletteArray} (mask it like: {@code paletteArray[reduceIndex(color) & 0xFF]}).
     * @param color an RGBA8888 int that represents a color this should try to find a similar color for in its palette
     * @return a byte index that can be used to look up a color from the {@link #paletteArray}
     */
    public byte reduceIndex(int color)
    {
        if((color & 0x80) == 0) // less visible than half-transparent
            return 0; // transparent
        return paletteMapping[
            (color >>> 17 & 0x7C00)
                | (color >>> 14 & 0x3E0)
                | (color >>> 11 & 0x1F)];
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. Both the parameter and the returned color are packed float colors, as produced by
     * {@link Color#toFloatBits()} or many methods in SColor.
     * @param packedColor a packed float color this should try to find a similar color for in its palette
     * @return a packed float color from this palette, or 0f if color is mostly transparent
     * (0f is often but not always in the palette)
     */
    public float reduceFloat(float packedColor)
    {
        final int color = NumberUtils.floatToIntBits(packedColor);
        if(color >= 0) // if color is non-negative, then alpha is less than half of opaque
            return 0f;
        return NumberUtils.intBitsToFloat(Integer.reverseBytes(paletteArray[paletteMapping[
            (color << 7 & 0x7C00)
                | (color >>> 6 & 0x3E0)
                | (color >>> 19)] & 0xFF] & 0xFFFFFFFE));

    }

    /**
     * Modifies {@code color} so its RGB values will match the closest color in this PaletteReducer's palette. If color
     * has {@link Color#a} less than 0.5f, this will simply set color to be fully transparent, with rgba all 0.
     * @param color a libGDX Color that will be modified in-place; do not use a Color constant, use {@link Color#cpy()}
     *              or a temporary Color
     * @return color, after modifications.
     */
    public Color reduceInPlace(Color color)
    {
        if(color.a < 0.5f)
            return color.set(0);
        return color.set(paletteArray[paletteMapping[
            ((int) (color.r * 0x1f.8p+10) & 0x7C00)
                | ((int) (color.g * 0x1f.8p+5) & 0x3E0)
                | ((int) (color.r * 0x1f.8p+0))] & 0xFF]);
    }
    public static int hueShift(int rgba)
    {
        final int a = rgba & 0xFF;
        final float r = (rgba >>> 24) / 255f, g = (rgba >>> 16 & 0xFF) / 255f, b = (rgba >>> 8 & 0xFF) / 255f;
        final float luma = (float)Math.pow(r * 0.375f + g * 0.5f + b * 0.125f, 1.1875);
        final float adj = MathUtils.sin((luma - 0.5f) * Math.abs(luma - 0.5f) * 13.5f) * 0.09f;//(1.875f * 6.283185307179586f)
        final float warm = adj + r - b, mild = 0.5f * (adj + g - b);
        return (MathUtils.clamp((int) ((luma + 0.625f * warm - mild) * 256f), 0, 255)<<24|
            MathUtils.clamp((int) ((luma - 0.375f * warm + mild) * 256f), 0, 255)<<16|
            MathUtils.clamp((int) ((luma - 0.375f * warm - mild) * 256f), 0, 255)<<8|
            a);
    }
    public static void hueShiftPalette(int[] palette)
    {
        for (int i = 0; i < palette.length; i++) {
            palette[i] = hueShift(palette[i]);
        }
    }
    public void hueShift()
    {
        hueShiftPalette(paletteArray);
    }

}
